!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABORT	BSP/ff.c	133;"	d	file:
ACMD13	includes/sd.h	38;"	d
ACMD23	includes/sd.h	43;"	d
ACMD41	includes/sd.h	33;"	d
ADDR_MOD_16	includes/ieee802_15_4.h	18;"	d
ADDR_MOD_64	includes/ieee802_15_4.h	19;"	d
ADDR_MOD_RSVD	includes/ieee802_15_4.h	17;"	d
ADDR_START	BSP/sd.c	550;"	d	file:
ADPCM_H_INCLUDED	includes/adpcm.h	2;"	d
AM_ARC	includes/ff.h	309;"	d
AM_DIR	includes/ff.h	308;"	d
AM_HID	includes/ff.h	304;"	d
AM_LFN	includes/ff.h	307;"	d
AM_MASK	includes/ff.h	310;"	d
AM_RDO	includes/ff.h	303;"	d
AM_SYS	includes/ff.h	305;"	d
AM_VOL	includes/ff.h	306;"	d
APB_UART_CON	includes/uart.h	32;"	d
APB_UART_DATA	includes/uart.h	30;"	d
APB_UART_SCALER	includes/uart.h	33;"	d
APB_UART_STAT	includes/uart.h	31;"	d
APP	includes/application.h	2;"	d
AR	Makefile	/^AR=$(SPARC_PREFIX)ar$/;"	m
ASM_SRCS	Debug/sources.mk	/^ASM_SRCS := $/;"	m
ATA_GET_MODEL	includes/diskio.h	70;"	d
ATA_GET_REV	includes/diskio.h	69;"	d
ATA_GET_SN	includes/diskio.h	71;"	d
AUX_A	includes/gpio.h	36;"	d
AUX_B	includes/gpio.h	46;"	d
AUX_C	includes/gpio.h	56;"	d
AUX_D	includes/gpio.h	66;"	d
AUX_E	includes/gpio.h	76;"	d
AUX_F	includes/gpio.h	86;"	d
Active	BSP/ref/FAT32.h	/^    unsigned char Active;         \/\/0x80表示此分区有效$/;"	m	struct:PartRecord
Active	includes/FAT32.h	/^    unsigned char Active;         \/\/0x80表示此分区有效$/;"	m	struct:PartRecord
BIG_ENDIEND	includes/includes.h	90;"	d
BIT_0	includes/types.h	39;"	d
BIT_1	includes/types.h	40;"	d
BIT_10	includes/types.h	50;"	d
BIT_2	includes/types.h	41;"	d
BIT_3	includes/types.h	42;"	d
BIT_4	includes/types.h	43;"	d
BIT_5	includes/types.h	44;"	d
BIT_6	includes/types.h	45;"	d
BIT_7	includes/types.h	46;"	d
BIT_8	includes/types.h	48;"	d
BIT_9	includes/types.h	49;"	d
BPB_BkBootSec	BSP/ff.c	423;"	d	file:
BPB_BkBootSec	BSP/ref/FAT32.h	/^    unsigned char BPB_BkBootSec[2];  \/\/通常为6             offset:50$/;"	m	struct:FAT32_BPB
BPB_BkBootSec	includes/FAT32.h	/^    unsigned char BPB_BkBootSec[2];  \/\/通常为6             offset:50$/;"	m	struct:FAT32_BPB
BPB_BytesPerSec	BSP/ref/FAT32.h	/^    unsigned char BPB_BytesPerSec[2];\/\/每扇区字节数        offset:11$/;"	m	struct:FAT32_BPB
BPB_BytesPerSec	includes/FAT32.h	/^    unsigned char BPB_BytesPerSec[2];\/\/每扇区字节数        offset:11$/;"	m	struct:FAT32_BPB
BPB_BytsPerSec	BSP/ff.c	401;"	d	file:
BPB_ExtFlags	BSP/ff.c	419;"	d	file:
BPB_ExtFlags	BSP/ref/FAT32.h	/^    unsigned char BPB_ExtFlags[2];   \/\/FAT32特有           offset:40$/;"	m	struct:FAT32_BPB
BPB_ExtFlags	includes/FAT32.h	/^    unsigned char BPB_ExtFlags[2];   \/\/FAT32特有           offset:40$/;"	m	struct:FAT32_BPB
BPB_FATSz16	BSP/ff.c	408;"	d	file:
BPB_FATSz16	BSP/ref/FAT32.h	/^    unsigned char BPB_FATSz16[2];    \/\/FAT32为0            offset:22$/;"	m	struct:FAT32_BPB
BPB_FATSz16	includes/FAT32.h	/^    unsigned char BPB_FATSz16[2];    \/\/FAT32为0            offset:22$/;"	m	struct:FAT32_BPB
BPB_FATSz32	BSP/ff.c	418;"	d	file:
BPB_FATSz32	BSP/ref/FAT32.h	/^    unsigned char BPB_FATSz32[4];    \/\/一个FAT表扇区数     offset:36$/;"	m	struct:FAT32_BPB
BPB_FATSz32	includes/FAT32.h	/^    unsigned char BPB_FATSz32[4];    \/\/一个FAT表扇区数     offset:36$/;"	m	struct:FAT32_BPB
BPB_FSInfo	BSP/ff.c	422;"	d	file:
BPB_FSVer	BSP/ff.c	420;"	d	file:
BPB_FSVer	BSP/ref/FAT32.h	/^    unsigned char BPB_FSVer[2];      \/\/FAT32特有           offset:42$/;"	m	struct:FAT32_BPB
BPB_FSVer	includes/FAT32.h	/^    unsigned char BPB_FSVer[2];      \/\/FAT32特有           offset:42$/;"	m	struct:FAT32_BPB
BPB_HiddSec	BSP/ff.c	411;"	d	file:
BPB_HiddSec	BSP/ref/FAT32.h	/^    unsigned char BPB_HiddSec[4];    \/\/FAT区前隐扇区数     offset:28$/;"	m	struct:FAT32_BPB
BPB_HiddSec	includes/FAT32.h	/^    unsigned char BPB_HiddSec[4];    \/\/FAT区前隐扇区数     offset:28$/;"	m	struct:FAT32_BPB
BPB_Media	BSP/ff.c	407;"	d	file:
BPB_Media	BSP/ref/FAT32.h	/^    unsigned char BPB_Media[1];      \/\/存储介质            offset:21$/;"	m	struct:FAT32_BPB
BPB_Media	includes/FAT32.h	/^    unsigned char BPB_Media[1];      \/\/存储介质            offset:21$/;"	m	struct:FAT32_BPB
BPB_NumFATs	BSP/ff.c	404;"	d	file:
BPB_NumFATs	BSP/ref/FAT32.h	/^    unsigned char BPB_NumFATs[1];    \/\/此卷中FAT表数       offset:16$/;"	m	struct:FAT32_BPB
BPB_NumFATs	includes/FAT32.h	/^    unsigned char BPB_NumFATs[1];    \/\/此卷中FAT表数       offset:16$/;"	m	struct:FAT32_BPB
BPB_NumHeads	BSP/ff.c	410;"	d	file:
BPB_NumHeads	BSP/ref/FAT32.h	/^    unsigned char BPB_NumHeads[2];   \/\/磁头数              offset:26$/;"	m	struct:FAT32_BPB
BPB_NumHeads	includes/FAT32.h	/^    unsigned char BPB_NumHeads[2];   \/\/磁头数              offset:26$/;"	m	struct:FAT32_BPB
BPB_Reserved	BSP/ref/FAT32.h	/^    unsigned char BPB_Reserved[12];  \/\/扩展用              offset:52$/;"	m	struct:FAT32_BPB
BPB_Reserved	includes/FAT32.h	/^    unsigned char BPB_Reserved[12];  \/\/扩展用              offset:52$/;"	m	struct:FAT32_BPB
BPB_RootClus	BSP/ff.c	421;"	d	file:
BPB_RootClus	BSP/ref/FAT32.h	/^    unsigned char BPB_RootClus[4];   \/\/根目录簇号          offset:44$/;"	m	struct:FAT32_BPB
BPB_RootClus	includes/FAT32.h	/^    unsigned char BPB_RootClus[4];   \/\/根目录簇号          offset:44$/;"	m	struct:FAT32_BPB
BPB_RootEntCnt	BSP/ff.c	405;"	d	file:
BPB_RootEntCnt	BSP/ref/FAT32.h	/^    unsigned char BPB_RootEntCnt[2]; \/\/FAT32为0            offset:17$/;"	m	struct:FAT32_BPB
BPB_RootEntCnt	includes/FAT32.h	/^    unsigned char BPB_RootEntCnt[2]; \/\/FAT32为0            offset:17$/;"	m	struct:FAT32_BPB
BPB_RsvdSecCnt	BSP/ff.c	403;"	d	file:
BPB_RsvdSecCnt	BSP/ref/FAT32.h	/^    unsigned char BPB_RsvdSecCnt[2]; \/\/保留扇区数目        offset:14$/;"	m	struct:FAT32_BPB
BPB_RsvdSecCnt	includes/FAT32.h	/^    unsigned char BPB_RsvdSecCnt[2]; \/\/保留扇区数目        offset:14$/;"	m	struct:FAT32_BPB
BPB_SecPerClus	BSP/ff.c	402;"	d	file:
BPB_SecPerClus	BSP/ref/FAT32.h	/^    unsigned char BPB_SecPerClus[1]; \/\/每簇扇区数          offset:13$/;"	m	struct:FAT32_BPB
BPB_SecPerClus	includes/FAT32.h	/^    unsigned char BPB_SecPerClus[1]; \/\/每簇扇区数          offset:13$/;"	m	struct:FAT32_BPB
BPB_SecPerTrk	BSP/ff.c	409;"	d	file:
BPB_SecPerTrk	BSP/ref/FAT32.h	/^    unsigned char BPB_SecPerTrk[2];  \/\/磁道扇区数          offset:24$/;"	m	struct:FAT32_BPB
BPB_SecPerTrk	includes/FAT32.h	/^    unsigned char BPB_SecPerTrk[2];  \/\/磁道扇区数          offset:24$/;"	m	struct:FAT32_BPB
BPB_Sector_No	BSP/ref/FAT32.h	/^    unsigned char BPB_Sector_No;   \/\/BPB所在扇区号$/;"	m	struct:FAT32_Init_Arg
BPB_Sector_No	includes/FAT32.h	/^    unsigned char BPB_Sector_No;   \/\/BPB所在扇区号$/;"	m	struct:FAT32_Init_Arg
BPB_TotSec16	BSP/ff.c	406;"	d	file:
BPB_TotSec16	BSP/ref/FAT32.h	/^    unsigned char BPB_TotSec16[2];   \/\/FAT32为0            offset:19$/;"	m	struct:FAT32_BPB
BPB_TotSec16	includes/FAT32.h	/^    unsigned char BPB_TotSec16[2];   \/\/FAT32为0            offset:19$/;"	m	struct:FAT32_BPB
BPB_TotSec32	BSP/ff.c	412;"	d	file:
BPB_TotSec32	BSP/ref/FAT32.h	/^    unsigned char BPB_TotSec32[4];   \/\/该卷总扇区数        offset:32$/;"	m	struct:FAT32_BPB
BPB_TotSec32	includes/FAT32.h	/^    unsigned char BPB_TotSec32[4];   \/\/该卷总扇区数        offset:32$/;"	m	struct:FAT32_BPB
BS_55AA	BSP/ff.c	435;"	d	file:
BS_BootSig	BSP/ff.c	414;"	d	file:
BS_BootSig	BSP/ref/FAT32.h	/^    unsigned char BS_BootSig[1];     \/\/                    offset:66$/;"	m	struct:FAT32_BPB
BS_BootSig	includes/FAT32.h	/^    unsigned char BS_BootSig[1];     \/\/                    offset:66$/;"	m	struct:FAT32_BPB
BS_BootSig32	BSP/ff.c	425;"	d	file:
BS_DrvNum	BSP/ff.c	413;"	d	file:
BS_DrvNum	BSP/ref/FAT32.h	/^    unsigned char BS_DrvNum[1];      \/\/                    offset:64$/;"	m	struct:FAT32_BPB
BS_DrvNum	includes/FAT32.h	/^    unsigned char BS_DrvNum[1];      \/\/                    offset:64$/;"	m	struct:FAT32_BPB
BS_DrvNum32	BSP/ff.c	424;"	d	file:
BS_FilSysType	BSP/ff.c	417;"	d	file:
BS_FilSysType	BSP/ref/FAT32.h	/^    unsigned char BS_FilSysType[11]; \/\/	                offset:71$/;"	m	struct:FAT32_BPB
BS_FilSysType	includes/FAT32.h	/^    unsigned char BS_FilSysType[11]; \/\/	                offset:71$/;"	m	struct:FAT32_BPB
BS_FilSysType1	BSP/ref/FAT32.h	/^    unsigned char BS_FilSysType1[8]; \/\/"FAT32    "         offset:82$/;"	m	struct:FAT32_BPB
BS_FilSysType1	includes/FAT32.h	/^    unsigned char BS_FilSysType1[8]; \/\/"FAT32    "         offset:82$/;"	m	struct:FAT32_BPB
BS_FilSysType32	BSP/ff.c	428;"	d	file:
BS_OEMName	BSP/ff.c	400;"	d	file:
BS_OEMName	BSP/ref/FAT32.h	/^    unsigned char BS_OEMName[8];     \/\/                    offset: 3$/;"	m	struct:FAT32_BPB
BS_OEMName	includes/FAT32.h	/^    unsigned char BS_OEMName[8];     \/\/                    offset: 3$/;"	m	struct:FAT32_BPB
BS_Reserved1	BSP/ref/FAT32.h	/^    unsigned char BS_Reserved1[1];   \/\/                    offset:65$/;"	m	struct:FAT32_BPB
BS_Reserved1	includes/FAT32.h	/^    unsigned char BS_Reserved1[1];   \/\/                    offset:65$/;"	m	struct:FAT32_BPB
BS_VolID	BSP/ff.c	415;"	d	file:
BS_VolID	BSP/ref/FAT32.h	/^    unsigned char BS_VolID[4];       \/\/                    offset:67$/;"	m	struct:FAT32_BPB
BS_VolID	includes/FAT32.h	/^    unsigned char BS_VolID[4];       \/\/                    offset:67$/;"	m	struct:FAT32_BPB
BS_VolID32	BSP/ff.c	426;"	d	file:
BS_VolLab	BSP/ff.c	416;"	d	file:
BS_VolLab32	BSP/ff.c	427;"	d	file:
BS_jmpBoot	BSP/ff.c	399;"	d	file:
BS_jmpBoot	BSP/ref/FAT32.h	/^    unsigned char BS_jmpBoot[3];     \/\/跳转指令            offset: 0$/;"	m	struct:FAT32_BPB
BS_jmpBoot	includes/FAT32.h	/^    unsigned char BS_jmpBoot[3];     \/\/跳转指令            offset: 0$/;"	m	struct:FAT32_BPB
BUFFER_TYPE	BSP/ref/sd.h	/^} BUFFER_TYPE; \/\/256 bytes, 128 words$/;"	t	typeref:struct:STORE
BUFFER_TYPE	includes/sd.h	/^} BUFFER_TYPE; \/\/256 bytes, 128 words$/;"	t	typeref:struct:STORE
BYTE	includes/integer.h	/^typedef unsigned char		BYTE;$/;"	t
BYTE_ORDER	includes/includes.h	98;"	d
BootSectSig0	BSP/ref/FAT32.h	/^    unsigned char BootSectSig0;$/;"	m	struct:PartSector
BootSectSig0	includes/FAT32.h	/^    unsigned char BootSectSig0;$/;"	m	struct:PartSector
BootSectSig1	BSP/ref/FAT32.h	/^    unsigned char BootSectSig1;$/;"	m	struct:PartSector
BootSectSig1	includes/FAT32.h	/^    unsigned char BootSectSig1;$/;"	m	struct:PartSector
BytesPerSector	BSP/ref/FAT32.h	/^    unsigned int  BytesPerSector;	 \/\/每个扇区的字节数$/;"	m	struct:FAT32_Init_Arg
BytesPerSector	includes/FAT32.h	/^    unsigned int  BytesPerSector;	 \/\/每个扇区的字节数$/;"	m	struct:FAT32_Init_Arg
CC	Makefile	/^CC=$(SPARC_PREFIX)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-msoft-float -Wall -Wpointer-arith -Wstrict-prototypes -Winline -Wundef -Woverloaded-virtual -g -O2 -ffunction-sections -fdata-sections -fno-rtti -fno-exceptions -fvtable-gc  -I$(TOPDIR)\/includes  -I$(INSTALL_DIR)\/include$/;"	m
CHANGE_REG_NUM	includes/ov7660.h	8;"	d
CHAR	includes/integer.h	/^typedef char				CHAR;$/;"	t
CLRCLK	includes/spi.h	95;"	d
CLRMOSI	includes/spi.h	93;"	d
CMD0	includes/sd.h	31;"	d
CMD1	includes/sd.h	32;"	d
CMD10	includes/sd.h	36;"	d
CMD12	includes/sd.h	37;"	d
CMD16	includes/sd.h	39;"	d
CMD17	includes/sd.h	40;"	d
CMD18	includes/sd.h	41;"	d
CMD23	includes/sd.h	42;"	d
CMD24	includes/sd.h	44;"	d
CMD25	includes/sd.h	45;"	d
CMD55	includes/sd.h	46;"	d
CMD58	includes/sd.h	47;"	d
CMD8	includes/sd.h	34;"	d
CMD9	includes/sd.h	35;"	d
CMD_INIT	BSP/ref/sd.h	24;"	d
CMD_INIT	includes/sd.h	25;"	d
CMD_READ_SINGLE	BSP/ref/sd.h	25;"	d
CMD_READ_SINGLE	includes/sd.h	26;"	d
CMD_RESET	BSP/ref/sd.h	23;"	d
CMD_RESET	includes/sd.h	24;"	d
CMD_WRITE_SINGLE	BSP/ref/sd.h	26;"	d
CMD_WRITE_SINGLE	includes/sd.h	27;"	d
COBJS	Adpcm/Makefile	/^COBJS	= adpcm.o$/;"	m
COBJS	Application/Makefile	/^COBJS	= application.o$/;"	m
COBJS	BSP/Makefile	/^COBJS	=uz2400d.o rf.o VS1003x.o data.o ov7660.o led.o sd.o ff.o sccb.o$/;"	m
COBJS	HAL/Makefile	/^COBJS	= spi.o gpio.o apbuart.o tools.o$/;"	m
COBJS	Stack/Makefile	/^COBJS	= netif.o translate.o $/;"	m
COBJS	misc/Makefile	/^COBJS	= $/;"	m
CREATE_LINKMAP	includes/ff.h	314;"	d
CTRL_EJECT	includes/diskio.h	59;"	d
CTRL_ERASE_SECTOR	includes/diskio.h	54;"	d
CTRL_LOCK	includes/diskio.h	58;"	d
CTRL_POWER	includes/diskio.h	57;"	d
CTRL_SYNC	includes/diskio.h	50;"	d
C_DEPS	Debug/sources.mk	/^C_DEPS := $/;"	m
C_SRCS	Debug/sources.mk	/^C_SRCS := $/;"	m
CurrVol	BSP/ff.c	/^BYTE CurrVol;			\/* Current drive *\/$/;"	v	file:
DATA	includes/data.h	2;"	d
DATA_LEN	BSP/VS1003x.c	22;"	d	file:
DBG_FAT32	includes/FAT32.h	6;"	d
DDE	BSP/ff.c	454;"	d	file:
DEF_NAMEBUF	BSP/ff.c	487;"	d	file:
DEF_NAMEBUF	BSP/ff.c	493;"	d	file:
DEF_NAMEBUF	BSP/ff.c	498;"	d	file:
DEF_NAMEBUF	BSP/ff.c	503;"	d	file:
DEV_TYPE_TX	includes/lemon.h	14;"	d
DIN_A	includes/gpio.h	30;"	d
DIN_B	includes/gpio.h	40;"	d
DIN_C	includes/gpio.h	50;"	d
DIN_D	includes/gpio.h	60;"	d
DIN_E	includes/gpio.h	70;"	d
DIN_F	includes/gpio.h	80;"	d
DIR	includes/ff.h	/^} DIR;$/;"	t	typeref:struct:__anon6
DIR_A	includes/gpio.h	32;"	d
DIR_Attr	BSP/ff.c	438;"	d	file:
DIR_B	includes/gpio.h	42;"	d
DIR_C	includes/gpio.h	52;"	d
DIR_CrtDate	BSP/ff.c	441;"	d	file:
DIR_CrtTime	BSP/ff.c	440;"	d	file:
DIR_D	includes/gpio.h	62;"	d
DIR_E	includes/gpio.h	72;"	d
DIR_F	includes/gpio.h	82;"	d
DIR_FileSize	BSP/ff.c	446;"	d	file:
DIR_FstClusHI	BSP/ff.c	442;"	d	file:
DIR_FstClusLO	BSP/ff.c	445;"	d	file:
DIR_NAME_LEN	BSP/ref/FAT32.h	77;"	d
DIR_NAME_LEN	includes/FAT32.h	79;"	d
DIR_NTres	BSP/ff.c	439;"	d	file:
DIR_Name	BSP/ff.c	437;"	d	file:
DIR_WrtDate	BSP/ff.c	444;"	d	file:
DIR_WrtTime	BSP/ff.c	443;"	d	file:
DISABLE	includes/uart.h	14;"	d
DOUR_A	includes/gpio.h	31;"	d
DOUR_B	includes/gpio.h	41;"	d
DOUR_C	includes/gpio.h	51;"	d
DOUR_D	includes/gpio.h	61;"	d
DOUR_E	includes/gpio.h	71;"	d
DOUR_F	includes/gpio.h	81;"	d
DRESULT	includes/diskio.h	/^} DRESULT;$/;"	t	typeref:enum:__anon2
DSTATUS	includes/diskio.h	/^typedef BYTE	DSTATUS;$/;"	t
DWORD	includes/integer.h	/^typedef unsigned long		DWORD;$/;"	t
EADR_0	includes/lemon.h	29;"	d
EADR_0	includes/lemon.h	43;"	d
EADR_1	includes/lemon.h	30;"	d
EADR_1	includes/lemon.h	44;"	d
EADR_2	includes/lemon.h	31;"	d
EADR_2	includes/lemon.h	45;"	d
EADR_3	includes/lemon.h	32;"	d
EADR_3	includes/lemon.h	46;"	d
EADR_4	includes/lemon.h	33;"	d
EADR_4	includes/lemon.h	47;"	d
EADR_5	includes/lemon.h	34;"	d
EADR_5	includes/lemon.h	48;"	d
EADR_6	includes/lemon.h	35;"	d
EADR_6	includes/lemon.h	49;"	d
EADR_7	includes/lemon.h	36;"	d
EADR_7	includes/lemon.h	50;"	d
ENABLE_RX	includes/uart.h	15;"	d
ENABLE_TX	includes/uart.h	16;"	d
ENTER_FF	BSP/ff.c	126;"	d	file:
ENTER_FF	BSP/ff.c	129;"	d	file:
EOF	includes/ff.h	239;"	d
EVEN_PARITY	includes/uart.h	19;"	d
EXECUTABLES	Debug/sources.mk	/^EXECUTABLES := $/;"	m
EndCylSect	BSP/ref/FAT32.h	/^    unsigned char EndCylSect[2];  \/\/结束柱面与扇区$/;"	m	struct:PartRecord
EndCylSect	includes/FAT32.h	/^    unsigned char EndCylSect[2];  \/\/结束柱面与扇区$/;"	m	struct:PartRecord
EndHead	BSP/ref/FAT32.h	/^    unsigned char EndHead;        \/\/分区的结束头$/;"	m	struct:PartRecord
EndHead	includes/FAT32.h	/^    unsigned char EndHead;        \/\/分区的结束头$/;"	m	struct:PartRecord
FAIL	includes/types.h	36;"	d
FALSE	includes/types.h	34;"	d
FAT32_BPB	BSP/ref/FAT32.h	/^struct FAT32_BPB$/;"	s
FAT32_BPB	includes/FAT32.h	/^struct FAT32_BPB$/;"	s
FAT32_Buffer	BSP/FAT32.c	/^unsigned char FAT32_Buffer[512]; \/\/扇区数据读写缓冲区$/;"	v
FAT32_Buffer	BSP/ref/FAT32.c	/^unsigned char FAT32_Buffer[512]; \/\/扇区数据读写缓冲区$/;"	v
FAT32_CompareName	BSP/FAT32.c	/^unsigned char FAT32_CompareName(unsigned char *sname,unsigned char *dname)$/;"	f
FAT32_CompareName	BSP/ref/FAT32.c	/^unsigned char FAT32_CompareName(unsigned char *sname,unsigned char *dname)$/;"	f
FAT32_CopyName	BSP/FAT32.c	/^void FAT32_CopyName(unsigned char *Dname,unsigned char *filename)$/;"	f
FAT32_CopyName	BSP/ref/FAT32.c	/^void FAT32_CopyName(unsigned char *Dname,unsigned char *filename)$/;"	f
FAT32_EnterDir	BSP/FAT32.c	/^unsigned long FAT32_EnterDir(char *path)$/;"	f
FAT32_EnterDir	BSP/ref/FAT32.c	/^unsigned long FAT32_EnterDir(char *path)$/;"	f
FAT32_EnterRootDir	BSP/FAT32.c	/^void FAT32_EnterRootDir()$/;"	f
FAT32_EnterRootDir	BSP/ref/FAT32.c	/^void FAT32_EnterRootDir()$/;"	f
FAT32_FAT	BSP/ref/FAT32.h	/^struct FAT32_FAT$/;"	s
FAT32_FAT	includes/FAT32.h	/^struct FAT32_FAT$/;"	s
FAT32_FAT_Item	BSP/ref/FAT32.h	/^struct FAT32_FAT_Item$/;"	s
FAT32_FAT_Item	includes/FAT32.h	/^struct FAT32_FAT_Item$/;"	s
FAT32_FindBPB	BSP/FAT32.c	/^unsigned long  FAT32_FindBPB()  \/\/寻找BPB所在的扇区号$/;"	f
FAT32_FindBPB	BSP/ref/FAT32.c	/^unsigned long  FAT32_FindBPB()  \/\/寻找BPB所在的扇区号$/;"	f
FAT32_GetName	BSP/FAT32.c	/^void FAT32_GetName(unsigned char *dname,unsigned char *sname)$/;"	f
FAT32_GetName	BSP/ref/FAT32.c	/^void FAT32_GetName(unsigned char *dname,unsigned char *sname)$/;"	f
FAT32_GetNextCluster	BSP/FAT32.c	/^unsigned long FAT32_GetNextCluster(unsigned long LastCluster)$/;"	f
FAT32_GetNextCluster	BSP/ref/FAT32.c	/^unsigned long FAT32_GetNextCluster(unsigned long LastCluster)$/;"	f
FAT32_Get_Total_Size	BSP/FAT32.c	/^unsigned long FAT32_Get_Total_Size() \/\/存储器的总容量，单位为M$/;"	f
FAT32_Get_Total_Size	BSP/ref/FAT32.c	/^unsigned long FAT32_Get_Total_Size() \/\/存储器的总容量，单位为M$/;"	f
FAT32_Init	BSP/FAT32.c	/^void FAT32_Init(struct FAT32_Init_Arg *arg)$/;"	f
FAT32_Init	BSP/ref/FAT32.c	/^void FAT32_Init(struct FAT32_Init_Arg *arg)$/;"	f
FAT32_Init_Arg	BSP/ref/FAT32.h	/^struct FAT32_Init_Arg$/;"	s
FAT32_Init_Arg	includes/FAT32.h	/^struct FAT32_Init_Arg$/;"	s
FAT32_OpenFile	BSP/FAT32.c	/^void * FAT32_OpenFile(char *filepath)$/;"	f
FAT32_OpenFile	BSP/ref/FAT32.c	/^void * FAT32_OpenFile(char *filepath)$/;"	f
FAT32_PlayFile	BSP/ref/FAT32.c	/^char FAT32_PlayFile(struct FileInfoStruct *pstru)$/;"	f
FAT32_ReadFile	BSP/FAT32.c	/^void FAT32_ReadFile(struct FileInfoStruct *pstru)$/;"	f
FAT32_ReadFile	BSP/ref/FAT32.c	/^void FAT32_ReadFile(struct FileInfoStruct *pstru)$/;"	f
FAT32_ReadSector	BSP/FAT32.c	/^unsigned char * FAT32_ReadSector(unsigned long LBA,unsigned char *buf) \/\/FAT32中读取扇区的函数$/;"	f
FAT32_ReadSector	BSP/ref/FAT32.c	/^unsigned char * FAT32_ReadSector(unsigned long LBA,unsigned char *buf) \/\/FAT32中读取扇区的函数$/;"	f
FAT32_Test	BSP/FAT32.c	/^void FAT32_Test()$/;"	f
FAT32_Test	BSP/ref/FAT32.c	/^void FAT32_Test()$/;"	f
FAT32_WriteSector	BSP/FAT32.c	/^unsigned char FAT32_WriteSector(unsigned long LBA,unsigned char *buf)\/\/FAT32中写扇区的函数$/;"	f
FAT32_WriteSector	BSP/ref/FAT32.c	/^unsigned char FAT32_WriteSector(unsigned long LBA,unsigned char *buf)\/\/FAT32中写扇区的函数$/;"	f
FAT32_get_dir	BSP/FAT32.c	/^unsigned char FAT32_get_dir (char *filepath)$/;"	f
FAT32_get_dir	BSP/ref/FAT32.c	/^unsigned char FAT32_get_dir (char *filepath)$/;"	f
FATFS	includes/ff.h	/^} FATFS;$/;"	t	typeref:struct:__anon4
FATsectors	BSP/ref/FAT32.h	/^    unsigned int  FATsectors;            \/\/FAT表所占扇区数$/;"	m	struct:FAT32_Init_Arg
FATsectors	includes/FAT32.h	/^    unsigned int  FATsectors;            \/\/FAT表所占扇区数$/;"	m	struct:FAT32_Init_Arg
FA_CREATE_ALWAYS	includes/ff.h	287;"	d
FA_CREATE_NEW	includes/ff.h	286;"	d
FA_OPEN_ALWAYS	includes/ff.h	288;"	d
FA_OPEN_EXISTING	includes/ff.h	281;"	d
FA_READ	includes/ff.h	280;"	d
FA_WRITE	includes/ff.h	285;"	d
FA__DIRTY	includes/ff.h	290;"	d
FA__ERROR	includes/ff.h	282;"	d
FA__WRITTEN	includes/ff.h	289;"	d
FIFO_RX_INT	includes/uart.h	24;"	d
FIFO_TX_INT	includes/uart.h	23;"	d
FIL	includes/ff.h	/^} FIL;$/;"	t	typeref:struct:__anon5
FILELEN	includes/data.h	5;"	d
FILESEM	BSP/ff.c	/^} FILESEM;$/;"	t	typeref:struct:__anon1	file:
FILE_NAME_LEN	BSP/ref/FAT32.h	96;"	d
FILE_NAME_LEN	includes/FAT32.h	98;"	d
FILINFO	includes/ff.h	/^} FILINFO;$/;"	t	typeref:struct:__anon7
FLOW_CONTROL	includes/uart.h	22;"	d
FPGA_H_	includes/fpga.h	9;"	d
FREE_BUF	BSP/ff.c	489;"	d	file:
FREE_BUF	BSP/ff.c	495;"	d	file:
FREE_BUF	BSP/ff.c	500;"	d	file:
FREE_BUF	BSP/ff.c	507;"	d	file:
FRESULT	includes/ff.h	/^} FRESULT;$/;"	t	typeref:enum:__anon8
FRM_TYPE_ACK	includes/ieee802_15_4.h	13;"	d
FRM_TYPE_BEACON	includes/ieee802_15_4.h	11;"	d
FRM_TYPE_CMD	includes/ieee802_15_4.h	14;"	d
FRM_TYPE_DATA	includes/ieee802_15_4.h	12;"	d
FRM_VER_0	includes/ieee802_15_4.h	21;"	d
FRM_VER_1	includes/ieee802_15_4.h	22;"	d
FR_DENIED	includes/ff.h	/^	FR_DENIED,				\/* (7) Acces denied due to prohibited access or directory full *\/$/;"	e	enum:__anon8
FR_DISK_ERR	includes/ff.h	/^	FR_DISK_ERR,			\/* (1) A hard error occured in the low level disk I\/O layer *\/$/;"	e	enum:__anon8
FR_EXIST	includes/ff.h	/^	FR_EXIST,				\/* (8) Acces denied due to prohibited access *\/$/;"	e	enum:__anon8
FR_INT_ERR	includes/ff.h	/^	FR_INT_ERR,				\/* (2) Assertion failed *\/$/;"	e	enum:__anon8
FR_INVALID_DRIVE	includes/ff.h	/^	FR_INVALID_DRIVE,		\/* (11) The logical drive number is invalid *\/$/;"	e	enum:__anon8
FR_INVALID_NAME	includes/ff.h	/^	FR_INVALID_NAME,		\/* (6) The path name format is invalid *\/$/;"	e	enum:__anon8
FR_INVALID_OBJECT	includes/ff.h	/^	FR_INVALID_OBJECT,		\/* (9) The file\/directory object is invalid *\/$/;"	e	enum:__anon8
FR_INVALID_PARAMETER	includes/ff.h	/^	FR_INVALID_PARAMETER	\/* (19) Given parameter is invalid *\/$/;"	e	enum:__anon8
FR_LOCKED	includes/ff.h	/^	FR_LOCKED,				\/* (16) The operation is rejected according to the file shareing policy *\/$/;"	e	enum:__anon8
FR_MKFS_ABORTED	includes/ff.h	/^	FR_MKFS_ABORTED,		\/* (14) The f_mkfs() aborted due to any parameter error *\/$/;"	e	enum:__anon8
FR_NOT_ENABLED	includes/ff.h	/^	FR_NOT_ENABLED,			\/* (12) The volume has no work area *\/$/;"	e	enum:__anon8
FR_NOT_ENOUGH_CORE	includes/ff.h	/^	FR_NOT_ENOUGH_CORE,		\/* (17) LFN working buffer could not be allocated *\/$/;"	e	enum:__anon8
FR_NOT_READY	includes/ff.h	/^	FR_NOT_READY,			\/* (3) The physical drive cannot work *\/$/;"	e	enum:__anon8
FR_NO_FILE	includes/ff.h	/^	FR_NO_FILE,				\/* (4) Could not find the file *\/$/;"	e	enum:__anon8
FR_NO_FILESYSTEM	includes/ff.h	/^	FR_NO_FILESYSTEM,		\/* (13) There is no valid FAT volume *\/$/;"	e	enum:__anon8
FR_NO_PATH	includes/ff.h	/^	FR_NO_PATH,				\/* (5) Could not find the path *\/$/;"	e	enum:__anon8
FR_OK	includes/ff.h	/^	FR_OK = 0,				\/* (0) Succeeded *\/$/;"	e	enum:__anon8
FR_TIMEOUT	includes/ff.h	/^	FR_TIMEOUT,				\/* (15) Could not get a grant to access the volume within defined period *\/$/;"	e	enum:__anon8
FR_TOO_MANY_OPEN_FILES	includes/ff.h	/^	FR_TOO_MANY_OPEN_FILES,	\/* (18) Number of open files > _FS_SHARE *\/$/;"	e	enum:__anon8
FR_WRITE_PROTECTED	includes/ff.h	/^	FR_WRITE_PROTECTED,		\/* (10) The physical drive is write protected *\/$/;"	e	enum:__anon8
FSI_Free_Count	BSP/ff.c	431;"	d	file:
FSI_LeadSig	BSP/ff.c	429;"	d	file:
FSI_Nxt_Free	BSP/ff.c	432;"	d	file:
FSI_StrucSig	BSP/ff.c	430;"	d	file:
FSInfo	BSP/ref/FAT32.h	/^    unsigned char FSInfo[2];         \/\/保留扇区FSINFO扇区数offset:48$/;"	m	struct:FAT32_BPB
FSInfo	includes/FAT32.h	/^    unsigned char FSInfo[2];         \/\/保留扇区FSINFO扇区数offset:48$/;"	m	struct:FAT32_BPB
FS_FAT12	includes/ff.h	296;"	d
FS_FAT16	includes/ff.h	297;"	d
FS_FAT32	includes/ff.h	298;"	d
FatFs	BSP/ff.c	/^FATFS *FatFs[_VOLUMES];	\/* Pointer to the file system objects (logical drives) *\/$/;"	v	file:
FileAttr	BSP/ref/FAT32.h	/^    unsigned char  FileAttr;					\/\/< file attr for last file accessed$/;"	m	struct:FileInfoStruct
FileAttr	includes/FAT32.h	/^    unsigned char  FileAttr;					\/\/< file attr for last file accessed$/;"	m	struct:FileInfoStruct
FileCreateDate	BSP/ref/FAT32.h	/^    unsigned short FileCreateDate;			\/\/< file creation date for last file accessed$/;"	m	struct:FileInfoStruct
FileCreateDate	includes/FAT32.h	/^    unsigned short FileCreateDate;			\/\/< file creation date for last file accessed$/;"	m	struct:FileInfoStruct
FileCreateTime	BSP/ref/FAT32.h	/^    unsigned short FileCreateTime;			\/\/< file creation time for last file accessed$/;"	m	struct:FileInfoStruct
FileCreateTime	includes/FAT32.h	/^    unsigned short FileCreateTime;			\/\/< file creation time for last file accessed$/;"	m	struct:FileInfoStruct
FileCurCluster	BSP/ref/FAT32.h	/^    unsigned long  FileCurCluster;$/;"	m	struct:FileInfoStruct
FileCurCluster	includes/FAT32.h	/^    unsigned long  FileCurCluster;$/;"	m	struct:FileInfoStruct
FileInfo	BSP/FAT32.c	/^struct FileInfoStruct FileInfo;        \/\/文件信息结构体实体$/;"	v	typeref:struct:FileInfoStruct
FileInfo	BSP/ref/FAT32.c	/^struct FileInfoStruct FileInfo;        \/\/文件信息结构体实体$/;"	v	typeref:struct:FileInfoStruct
FileInfoStruct	BSP/ref/FAT32.h	/^struct FileInfoStruct$/;"	s
FileInfoStruct	includes/FAT32.h	/^struct FileInfoStruct$/;"	s
FileMDate	BSP/ref/FAT32.h	/^    unsigned short FileMDate;$/;"	m	struct:FileInfoStruct
FileMDate	includes/FAT32.h	/^    unsigned short FileMDate;$/;"	m	struct:FileInfoStruct
FileMTime	BSP/ref/FAT32.h	/^    unsigned short FileMTime;$/;"	m	struct:FileInfoStruct
FileMTime	includes/FAT32.h	/^    unsigned short FileMTime;$/;"	m	struct:FileInfoStruct
FileName	BSP/ref/FAT32.h	/^    unsigned char  FileName[12];$/;"	m	struct:FileInfoStruct
FileName	includes/FAT32.h	/^    unsigned char  FileName[12];$/;"	m	struct:FileInfoStruct
FileNextCluster	BSP/ref/FAT32.h	/^    unsigned long  FileNextCluster;$/;"	m	struct:FileInfoStruct
FileNextCluster	includes/FAT32.h	/^    unsigned long  FileNextCluster;$/;"	m	struct:FileInfoStruct
FileOffset	BSP/ref/FAT32.h	/^    unsigned int   FileOffset;				    \/\/<file record offset$/;"	m	struct:FileInfoStruct
FileOffset	includes/FAT32.h	/^    unsigned int   FileOffset;				    \/\/<file record offset$/;"	m	struct:FileInfoStruct
FileSector	BSP/ref/FAT32.h	/^    unsigned long  FileSector;				    \/\/<file record place$/;"	m	struct:FileInfoStruct
FileSector	includes/FAT32.h	/^    unsigned long  FileSector;				    \/\/<file record place$/;"	m	struct:FileInfoStruct
FileSize	BSP/ref/FAT32.h	/^    unsigned long  FileSize;					\/\/< file size for last file accessed$/;"	m	struct:FileInfoStruct
FileSize	includes/FAT32.h	/^    unsigned long  FileSize;					\/\/< file size for last file accessed$/;"	m	struct:FileInfoStruct
FileStartCluster	BSP/ref/FAT32.h	/^    unsigned long  FileStartCluster;			\/\/< file starting cluster for last file accessed$/;"	m	struct:FileInfoStruct
FileStartCluster	includes/FAT32.h	/^    unsigned long  FileStartCluster;			\/\/< file starting cluster for last file accessed$/;"	m	struct:FileInfoStruct
Files	BSP/ff.c	/^FILESEM	Files[_FS_SHARE];	\/* File lock semaphores *\/$/;"	v	file:
FirstDataSector	BSP/ref/FAT32.h	/^    unsigned long FirstDataSector;	 \/\/文件数据开始扇区号$/;"	m	struct:FAT32_Init_Arg
FirstDataSector	includes/FAT32.h	/^    unsigned long FirstDataSector;	 \/\/文件数据开始扇区号$/;"	m	struct:FAT32_Init_Arg
FirstDirClust	BSP/ref/FAT32.h	/^    unsigned long FirstDirClust;       \/\/根目录的开始簇$/;"	m	struct:FAT32_Init_Arg
FirstDirClust	includes/FAT32.h	/^    unsigned long FirstDirClust;       \/\/根目录的开始簇$/;"	m	struct:FAT32_Init_Arg
FirstDirSector	BSP/ref/FAT32.h	/^    unsigned long FirstDirSector;	 \/\/第一个目录所在扇区$/;"	m	struct:FAT32_Init_Arg
FirstDirSector	includes/FAT32.h	/^    unsigned long FirstDirSector;	 \/\/第一个目录所在扇区$/;"	m	struct:FAT32_Init_Arg
FirstFATSector	BSP/ref/FAT32.h	/^    unsigned long FirstFATSector;	 \/\/第一个FAT表所在扇区$/;"	m	struct:FAT32_Init_Arg
FirstFATSector	includes/FAT32.h	/^    unsigned long FirstFATSector;	 \/\/第一个FAT表所在扇区$/;"	m	struct:FAT32_Init_Arg
FrameHead	includes/translate.h	/^struct FrameHead	      $/;"	s
Fsid	BSP/ff.c	/^WORD Fsid;				\/* File system mount ID *\/$/;"	v	file:
GET_BLOCK_SIZE	includes/diskio.h	53;"	d
GET_SECTOR_COUNT	includes/diskio.h	51;"	d
GET_SECTOR_SIZE	includes/diskio.h	52;"	d
GPIO_BASE	includes/fpga.h	15;"	d
GPIO_H_	includes/gpio.h	9;"	d
HALT	includes/rf.h	13;"	d
HREF_PIN_RD	BSP/ref/ov76602/ov7660.h	32;"	d
HREF_PIN_RD	includes/ov7660.h	23;"	d
IEDGE_A	includes/gpio.h	35;"	d
IEDGE_B	includes/gpio.h	45;"	d
IEDGE_C	includes/gpio.h	55;"	d
IEDGE_D	includes/gpio.h	65;"	d
IEDGE_E	includes/gpio.h	75;"	d
IEDGE_F	includes/gpio.h	85;"	d
IEEE802_15_4_H_	includes/ieee802_15_4.h	9;"	d
IEEE_MAC_LEN	includes/ieee802_15_4.h	49;"	d
IF_SGOW_DATA	BSP/ref/FAT32.h	3;"	d
IF_SGOW_DATA	includes/FAT32.h	5;"	d
ILEVEL_A	includes/gpio.h	34;"	d
ILEVEL_B	includes/gpio.h	44;"	d
ILEVEL_C	includes/gpio.h	54;"	d
ILEVEL_D	includes/gpio.h	64;"	d
ILEVEL_E	includes/gpio.h	74;"	d
ILEVEL_F	includes/gpio.h	84;"	d
IMASK_A	includes/gpio.h	33;"	d
IMASK_B	includes/gpio.h	43;"	d
IMASK_C	includes/gpio.h	53;"	d
IMASK_D	includes/gpio.h	63;"	d
IMASK_E	includes/gpio.h	73;"	d
IMASK_F	includes/gpio.h	83;"	d
INCLUDES_H_	includes/includes.h	17;"	d
INIT_BUF	BSP/ff.c	488;"	d	file:
INIT_BUF	BSP/ff.c	494;"	d	file:
INIT_BUF	BSP/ff.c	499;"	d	file:
INIT_BUF	BSP/ff.c	504;"	d	file:
INIT_CMD0_ERROR	BSP/ref/sd.h	16;"	d
INIT_CMD0_ERROR	includes/sd.h	17;"	d
INIT_CMD1_ERROR	BSP/ref/sd.h	17;"	d
INIT_CMD1_ERROR	includes/sd.h	18;"	d
INSTALL_DIR	Makefile	/^INSTALL_DIR=\/opt\/opdk\/ecos-rep-1.0.9\/leon3_install$/;"	m
INT	includes/integer.h	/^typedef int				INT;$/;"	t
ISTAT_A	includes/gpio.h	37;"	d
ISTAT_B	includes/gpio.h	47;"	d
ISTAT_C	includes/gpio.h	57;"	d
ISTAT_D	includes/gpio.h	67;"	d
ISTAT_E	includes/gpio.h	77;"	d
ISTAT_F	includes/gpio.h	87;"	d
Init_Arg	BSP/FAT32.c	/^struct FAT32_Init_Arg Init_Arg;	       \/\/初始化参数结构体实体$/;"	v	typeref:struct:FAT32_Init_Arg
Init_Arg	BSP/ref/FAT32.c	/^struct FAT32_Init_Arg Init_Arg;	       \/\/初始化参数结构体实体$/;"	v	typeref:struct:FAT32_Init_Arg
Init_Flag	BSP/ref/sd.c	/^unsigned char Init_Flag;    \/\/Set it to 1 when Init is processing.$/;"	v
Init_Flag	BSP/sd.c	/^unsigned char Init_Flag; \/\/Set it to 1 when Init is processing.$/;"	v
IsDBCS1	BSP/ff.c	360;"	d	file:
IsDBCS1	BSP/ff.c	362;"	d	file:
IsDBCS1	BSP/ff.c	373;"	d	file:
IsDBCS2	BSP/ff.c	366;"	d	file:
IsDBCS2	BSP/ff.c	368;"	d	file:
IsDBCS2	BSP/ff.c	374;"	d	file:
IsDigit	BSP/ff.c	355;"	d	file:
IsLower	BSP/ff.c	354;"	d	file:
IsUpper	BSP/ff.c	353;"	d	file:
Item	BSP/ref/FAT32.h	/^    unsigned char Item[4];$/;"	m	struct:FAT32_FAT_Item
Item	includes/FAT32.h	/^    unsigned char Item[4];$/;"	m	struct:FAT32_FAT_Item
Items	BSP/ref/FAT32.h	/^    struct FAT32_FAT_Item Items[128];$/;"	m	struct:FAT32_FAT	typeref:struct:FAT32_FAT::FAT32_FAT_Item
Items	includes/FAT32.h	/^    struct FAT32_FAT_Item Items[128];$/;"	m	struct:FAT32_FAT	typeref:struct:FAT32_FAT::FAT32_FAT_Item
LBA_Opened	BSP/ref/sd.c	/^unsigned char LBA_Opened=0; \/\/Set to 1 when a sector is opened.$/;"	v
LBA_Opened	BSP/sd.c	/^unsigned char LBA_Opened = 0; \/\/Set to 1 when a sector is opened.$/;"	v
LD	Makefile	/^LD=$(CC)$/;"	m
LD2PD	includes/ff.h	41;"	d
LD2PD	includes/ff.h	45;"	d
LD2PT	includes/ff.h	42;"	d
LD2PT	includes/ff.h	46;"	d
LDFLAGS	Makefile	/^LDFLAGS=-msoft-float -g -nostdlib -fvtable-gc -Wl,--gc-sections -Wl,-static -nostartfiles -L$(INSTALL_DIR)\/lib -Ttarget.ld$/;"	m
LDIR_Attr	BSP/ff.c	448;"	d	file:
LDIR_Chksum	BSP/ff.c	450;"	d	file:
LDIR_FstClusLO	BSP/ff.c	451;"	d	file:
LDIR_Ord	BSP/ff.c	447;"	d	file:
LDIR_Type	BSP/ff.c	449;"	d	file:
LD_CLUST	BSP/ff.c	151;"	d	file:
LD_DWORD	includes/ff.h	323;"	d
LD_DWORD	includes/ff.h	328;"	d
LD_WORD	includes/ff.h	322;"	d
LD_WORD	includes/ff.h	327;"	d
LEAVE_FF	BSP/ff.c	127;"	d	file:
LEAVE_FF	BSP/ff.c	130;"	d	file:
LEDG0	includes/led.h	13;"	d
LEDG1	includes/led.h	14;"	d
LED_H_	includes/led.h	9;"	d
LEMON_H_	includes/lemon.h	9;"	d
LIB	Adpcm/Makefile	/^LIB	= adpcm.a$/;"	m
LIB	Application/Makefile	/^LIB	= application.a$/;"	m
LIB	BSP/Makefile	/^LIB	= bsp.a$/;"	m
LIB	HAL/Makefile	/^LIB	= hal.a$/;"	m
LIB	Stack/Makefile	/^LIB	= stack.a$/;"	m
LIB	misc/Makefile	/^LIB	= misc.a$/;"	m
LIBS	Debug/objects.mk	/^LIBS :=$/;"	m
LIBS	Makefile	/^LIBS = Application\/application.a Adpcm\/adpcm.a Stack\/stack.a BSP\/bsp.a HAL\/hal.a $/;"	m
LITTLEENDIAN	includes/includes.h	94;"	d
LLE	BSP/ff.c	453;"	d	file:
LONG	includes/integer.h	/^typedef long				LONG;$/;"	t
LOOP_BACK	includes/uart.h	21;"	d
LfnBuf	BSP/ff.c	/^static WCHAR LfnBuf[_MAX_LFN+1];$/;"	v	file:
LfnOfs	BSP/ff.c	/^const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	\/* Offset of LFN chars in the directory entry *\/$/;"	v	file:
MAXRFRAME	Stack/translate.c	3;"	d	file:
MAXSFRAME	Stack/translate.c	4;"	d	file:
MBR_Table	BSP/ff.c	433;"	d	file:
MIN_FAT16	BSP/ff.c	391;"	d	file:
MIN_FAT32	BSP/ff.c	392;"	d	file:
MKPROM	Makefile	/^MKPROM=mkprom2$/;"	m
MMC_GET_CID	includes/diskio.h	64;"	d
MMC_GET_CSD	includes/diskio.h	63;"	d
MMC_GET_OCR	includes/diskio.h	65;"	d
MMC_GET_SDSTAT	includes/diskio.h	66;"	d
MMC_GET_TYPE	includes/diskio.h	62;"	d
MMC_GotoSectorOffset	BSP/ref/sd.c	/^void MMC_GotoSectorOffset(unsigned long LBA,unsigned int offset)$/;"	f
MMC_GotoSectorOffset	BSP/sd.c	/^void MMC_GotoSectorOffset(unsigned long LBA, unsigned int offset) {$/;"	f
MMC_Init	BSP/ref/sd.c	/^unsigned char MMC_Init()$/;"	f
MMC_Init	BSP/sd.c	/^unsigned char MMC_Init() {$/;"	f
MMC_LBA_Close	BSP/ref/sd.c	/^void MMC_LBA_Close()$/;"	f
MMC_LBA_Close	BSP/sd.c	/^void MMC_LBA_Close() {$/;"	f
MMC_Read_Block	BSP/ref/sd.c	/^unsigned char MMC_Read_Block(unsigned char CMD,unsigned long arg,unsigned char *Buffer,unsigned int Bytes)$/;"	f
MMC_Read_Block	BSP/sd.c	/^unsigned char MMC_Read_Block(unsigned char CMD, unsigned long arg,$/;"	f
MMC_Start_Read_Sector	BSP/ref/sd.c	/^unsigned char MMC_Start_Read_Sector(unsigned long sector)$/;"	f
MMC_Start_Read_Sector	BSP/sd.c	/^unsigned char MMC_Start_Read_Sector(unsigned long sector) {$/;"	f
MMC_Start_Read_Sectors	BSP/sd.c	/^unsigned char MMC_Start_Read_Sectors(unsigned long sector) {$/;"	f
MMC_Start_Read_Sectors2	BSP/sd.c	/^unsigned char MMC_Start_Read_Sectors2(unsigned long sector) {$/;"	f
MMC_VOLUME_INFO	BSP/ref/sd.h	/^typedef struct MMC_VOLUME_INFO$/;"	s
MMC_VOLUME_INFO	includes/sd.h	/^typedef struct MMC_VOLUME_INFO$/;"	s
MMC_get_data	BSP/ref/sd.c	/^void MMC_get_data(unsigned int Bytes,char *buffer)$/;"	f
MMC_get_data	BSP/sd.c	/^void MMC_get_data(unsigned int Bytes, char *buffer) {$/;"	f
MMC_get_data_LBA	BSP/ref/sd.c	/^void MMC_get_data_LBA(unsigned long lba, unsigned int Bytes,unsigned char *buffer)$/;"	f
MMC_get_data_LBA	BSP/sd.c	/^void MMC_get_data_LBA(unsigned long lba, unsigned int Bytes,$/;"	f
MMC_get_volume_info	BSP/ref/sd.c	/^void MMC_get_volume_info(void)$/;"	f
MMC_get_volume_info	BSP/sd.c	/^void MMC_get_volume_info(void) {$/;"	f
MMC_play_buffer	BSP/ref/sd.c	/^void MMC_play_buffer(char* buffer,unsigned int Bytes)$/;"	f
MMC_play_data	BSP/ref/sd.c	/^void MMC_play_data (unsigned int Bytes)$/;"	f
MMC_play_data_LBA	BSP/ref/sd.c	/^char MMC_play_data_LBA(unsigned long lba, unsigned int Bytes)$/;"	f
MMC_write_sector	BSP/ref/sd.c	/^unsigned char MMC_write_sector(unsigned long addr,unsigned char *Buffer)$/;"	f
MMC_write_sector	BSP/sd.c	/^unsigned char MMC_write_sector(unsigned long addr, unsigned char *Buffer) {$/;"	f
MMC_write_sectors	BSP/sd.c	/^unsigned char MMC_write_sectors(unsigned long addr, unsigned char *Buffer,$/;"	f
MP3_CCS_DES	includes/VS1003x.h	61;"	d
MP3_CCS_SEL	includes/VS1003x.h	60;"	d
MP3_CMD_CS	includes/VS1003x.h	54;"	d
MP3_DATA_CS	includes/VS1003x.h	57;"	d
MP3_DCS_DES	includes/VS1003x.h	66;"	d
MP3_DCS_SEL	includes/VS1003x.h	65;"	d
MP3_DREQ	includes/VS1003x.h	56;"	d
MP3_READ_DREQ	includes/VS1003x.h	68;"	d
NAND_FORMAT	includes/diskio.h	74;"	d
NDDE	BSP/ff.c	455;"	d	file:
NETIF_H_	includes/netif.h	9;"	d
NO_ADDRESS_FIELD	includes/ieee802_15_4.h	16;"	d
NS	BSP/ff.c	380;"	d	file:
NS_BODY	BSP/ff.c	384;"	d	file:
NS_DOT	BSP/ff.c	386;"	d	file:
NS_EXT	BSP/ff.c	385;"	d	file:
NS_LAST	BSP/ff.c	383;"	d	file:
NS_LFN	BSP/ff.c	382;"	d	file:
NS_LOSS	BSP/ff.c	381;"	d	file:
NTHREADS	includes/lemon.h	16;"	d
N_BLOCKS	BSP/sd.c	551;"	d	file:
N_FATS	BSP/ff.c	3553;"	d	file:
N_ROOTDIR	BSP/ff.c	3552;"	d	file:
OBJCOPY	Makefile	/^OBJCOPY=$(SPARC_PREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP=$(SPARC_PREFIX)objdump$/;"	m
OBJS	Debug/sources.mk	/^OBJS := $/;"	m
OBJ_SRCS	Debug/sources.mk	/^OBJ_SRCS := $/;"	m
ODD_PARITY	includes/uart.h	20;"	d
ONCELEN	Application/application.c	7;"	d	file:
OUTPUTDIR	Makefile	/^OUTPUTDIR=$(TOPDIR)\/objs$/;"	m
OV7660_HREF	includes/ov7660.h	12;"	d
OV7660_PCLK	includes/ov7660.h	10;"	d
OV7660_RD	BSP/ref/ov76602/ov7660.h	26;"	d
OV7660_RD	includes/ov7660.h	18;"	d
OV7660_VSYNC	includes/ov7660.h	11;"	d
OV7660_WR	BSP/ref/ov76602/ov7660.h	25;"	d
OV7660_WR	includes/ov7660.h	17;"	d
OV7660_XCLK_EN	includes/ov7660.h	13;"	d
OV7660_conf_window	BSP/ov7660.c	/^void OV7660_conf_window(int16u_t startx, int16u_t starty, int16u_t width,$/;"	f
OV7660_conf_window	BSP/ref/ov76602/ov7660.c	/^void OV7660_conf_window(U16 startx, U16 starty,$/;"	f
OV7660_init	BSP/ov7660.c	/^int8u_t OV7660_init(void) {$/;"	f
OV7660_power_init	BSP/ref/ov76602/ov7660.c	/^U8 OV7660_power_init(void)$/;"	f
OV7660_work	BSP/ov7660.c	/^void OV7660_work()$/;"	f
OV7660_work2	BSP/ov7660.c	/^void OV7660_work2()$/;"	f
OV766_device_id	BSP/ref/ov76602/ov7660.c	/^U8 OV766_device_id(void)$/;"	f
OV7670_COL_SIZE	includes/ov7660.h	32;"	d
OV7670_ROW_SIZE	includes/ov7660.h	31;"	d
O_SRCS	Debug/sources.mk	/^O_SRCS := $/;"	m
PANIDH	includes/lemon.h	23;"	d
PANIDL	includes/lemon.h	22;"	d
PAN_compress	includes/ieee802_15_4.h	/^		u16_t PAN_compress:1;$/;"	m	struct:frm_ctrl
PARTITION	includes/ff.h	/^} PARTITION;$/;"	t	typeref:struct:__anon3
PASS	includes/types.h	37;"	d
PB	includes/translate.h	/^	struct PortBuf   PB;$/;"	m	struct:PortKey	typeref:struct:PortKey::PortBuf
PCLK_PIN_RD	BSP/ref/ov76602/ov7660.h	35;"	d
PCLK_PIN_RD	includes/ov7660.h	25;"	d
PORTA	includes/gpio.h	29;"	d
PORTB	includes/gpio.h	39;"	d
PORTC	includes/gpio.h	49;"	d
PORTD	includes/gpio.h	59;"	d
PORTE	includes/gpio.h	69;"	d
PORTF	includes/gpio.h	79;"	d
PORTNUM	includes/translate.h	68;"	d
PRJNAME	Makefile	/^PRJNAME = leon3$/;"	m
PROM_FLAG	Makefile	/^PROM_FLAG=-msoft-float -freq 50 -rmw -romwidth 8 -romws 3$/;"	m
PacketHead	includes/translate.h	/^struct PacketHead$/;"	s
Part	BSP/ref/FAT32.h	/^    struct PartRecord Part[4];      \/\/4个分区记录$/;"	m	struct:PartSector	typeref:struct:PartSector::PartRecord
Part	includes/FAT32.h	/^    struct PartRecord Part[4];      \/\/4个分区记录$/;"	m	struct:PartSector	typeref:struct:PartSector::PartRecord
PartCode	BSP/ref/FAT32.h	/^    unsigned char PartCode[446]; \/\/MBR的引导程序$/;"	m	struct:PartSector
PartCode	includes/FAT32.h	/^    unsigned char PartCode[446]; \/\/MBR的引导程序$/;"	m	struct:PartSector
PartRecord	BSP/ref/FAT32.h	/^struct PartRecord$/;"	s
PartRecord	includes/FAT32.h	/^struct PartRecord$/;"	s
PartSector	BSP/ref/FAT32.h	/^struct PartSector$/;"	s
PartSector	includes/FAT32.h	/^struct PartSector$/;"	s
PartType	BSP/ref/FAT32.h	/^    unsigned char PartType;       \/\/分区类型$/;"	m	struct:PartRecord
PartType	includes/FAT32.h	/^    unsigned char PartType;       \/\/分区类型$/;"	m	struct:PartRecord
PortBuf	includes/translate.h	/^struct PortBuf$/;"	s
PortKey	includes/translate.h	/^struct PortKey$/;"	s
RANLIB	Makefile	/^RANLIB=$(SPARC_PREFIX)ranlib$/;"	m
READMISO	includes/spi.h	97;"	d
READ_BLOCK_ERROR	BSP/ref/sd.h	19;"	d
READ_BLOCK_ERROR	includes/sd.h	20;"	d
REG32	includes/types.h	11;"	d
RES_ERROR	includes/diskio.h	/^	RES_ERROR,		\/* 1: R\/W Error *\/$/;"	e	enum:__anon2
RES_NOTRDY	includes/diskio.h	/^	RES_NOTRDY,		\/* 3: Not Ready *\/$/;"	e	enum:__anon2
RES_OK	includes/diskio.h	/^	RES_OK = 0,		\/* 0: Successful *\/$/;"	e	enum:__anon2
RES_PARERR	includes/diskio.h	/^	RES_PARERR		\/* 4: Invalid Parameter *\/$/;"	e	enum:__anon2
RES_WRPRT	includes/diskio.h	/^	RES_WRPRT,		\/* 2: Write Protected *\/$/;"	e	enum:__anon2
REV	HAL/spi.c	25;"	d	file:
REVBUFSIZE	includes/translate.h	46;"	d
RF_AUTO_EXT_PA_CTRL_OFF	BSP/rf.c	/^void RF_AUTO_EXT_PA_CTRL_OFF(void)$/;"	f
RF_AUTO_EXT_PA_CTRL_ON	BSP/rf.c	/^void RF_AUTO_EXT_PA_CTRL_ON(void)$/;"	f
RF_CAL_SLEEP_CLK	BSP/rf.c	/^int32u_t RF_CAL_SLEEP_CLK(int8u_t clk_div)$/;"	f
RF_CHIP_INITIALIZE	BSP/rf.c	/^void RF_CHIP_INITIALIZE(void)$/;"	f
RF_H_	includes/rf.h	9;"	d
RF_NORMAL_SPEED	BSP/rf.c	/^void RF_NORMAL_SPEED(void)$/;"	f
RF_Rx	BSP/rf.c	/^int8u_t RF_Rx(int8u_t *buffer)$/;"	f
RF_SET_MAC_ADDR	BSP/rf.c	/^void RF_SET_MAC_ADDR(const int8u_t* eadr)$/;"	f
RF_SET_PAN_ID	BSP/rf.c	/^void RF_SET_PAN_ID(int16u_t panid)$/;"	f
RF_SET_SHORT_ADDRESS	BSP/rf.c	/^void RF_SET_SHORT_ADDRESS(int16u_t saddr)$/;"	f
RF_TURBO_SPEED_1M	BSP/rf.c	/^void RF_TURBO_SPEED_1M(void)$/;"	f
RF_TURBO_SPEED_2M	BSP/rf.c	/^void RF_TURBO_SPEED_2M(void)$/;"	f
RF_TxN	BSP/rf.c	/^result_t RF_TxN(int8u_t *tx_data, int8u_t tx_data_len, mybool ack_req)$/;"	f
RF_TxN_EN	includes/rf.h	18;"	d
RM	Debug/makefile	/^RM := rm -rf$/;"	m
RX_INT	includes/uart.h	17;"	d
Read_CID_MMC	BSP/ref/sd.c	/^unsigned char Read_CID_MMC(unsigned char *Buffer)$/;"	f
Read_CID_MMC	BSP/sd.c	/^unsigned char Read_CID_MMC(unsigned char *Buffer)$/;"	f
Read_CSD_MMC	BSP/ref/sd.c	/^unsigned char Read_CSD_MMC(unsigned char *Buffer)$/;"	f
Read_CSD_MMC	BSP/sd.c	/^unsigned char Read_CSD_MMC(unsigned char *Buffer)$/;"	f
RootDirCount	BSP/ref/FAT32.h	/^    unsigned long RootDirCount;	 \/\/根目录下的目录与文件数$/;"	m	struct:FAT32_Init_Arg
RootDirCount	includes/FAT32.h	/^    unsigned long RootDirCount;	 \/\/根目录下的目录与文件数$/;"	m	struct:FAT32_Init_Arg
RootDirSectors	BSP/ref/FAT32.h	/^    unsigned long RootDirSectors;	 \/\/根目录所占扇区数$/;"	m	struct:FAT32_Init_Arg
RootDirSectors	includes/FAT32.h	/^    unsigned long RootDirSectors;	 \/\/根目录所占扇区数$/;"	m	struct:FAT32_Init_Arg
SADRH	includes/lemon.h	39;"	d
SADRH	includes/lemon.h	53;"	d
SADRL	includes/lemon.h	38;"	d
SADRL	includes/lemon.h	52;"	d
SCCB_ACK	BSP/ref/ov76602/sccb.h	26;"	d
SCCB_ACK	includes/sccb.h	37;"	d
SCCB_CLK	includes/sccb.h	11;"	d
SCCB_CLK_HIGH	BSP/ref/ov76602/sccb.h	30;"	d
SCCB_CLK_HIGH	includes/sccb.h	41;"	d
SCCB_CLK_IN	BSP/ref/ov76602/sccb.h	39;"	d
SCCB_CLK_IN	includes/sccb.h	50;"	d
SCCB_CLK_LOW	BSP/ref/ov76602/sccb.h	31;"	d
SCCB_CLK_LOW	includes/sccb.h	42;"	d
SCCB_CLK_OUT	BSP/ref/ov76602/sccb.h	38;"	d
SCCB_CLK_OUT	includes/sccb.h	49;"	d
SCCB_DATA	includes/sccb.h	12;"	d
SCCB_DAT_HIGH	BSP/ref/ov76602/sccb.h	34;"	d
SCCB_DAT_HIGH	includes/sccb.h	45;"	d
SCCB_DAT_IN	BSP/ref/ov76602/sccb.h	43;"	d
SCCB_DAT_IN	includes/sccb.h	54;"	d
SCCB_DAT_LOW	BSP/ref/ov76602/sccb.h	35;"	d
SCCB_DAT_LOW	includes/sccb.h	46;"	d
SCCB_DAT_OUT	BSP/ref/ov76602/sccb.h	42;"	d
SCCB_DAT_OUT	includes/sccb.h	53;"	d
SCCB_DAT_RAD	BSP/ref/ov76602/sccb.h	46;"	d
SCCB_DAT_RAD	includes/sccb.h	57;"	d
SCCB_NACK	BSP/ref/ov76602/sccb.h	27;"	d
SCCB_NACK	includes/sccb.h	38;"	d
SCCB_delay	BSP/ref/ov76602/sccb.c	/^void SCCB_delay(void)$/;"	f
SCCB_delay	BSP/sccb.c	/^void SCCB_delay(void)$/;"	f
SCCB_read_byte	BSP/ref/ov76602/sccb.c	/^U8 SCCB_read_byte(U8 ack)$/;"	f
SCCB_read_byte	BSP/sccb.c	/^int8u_t SCCB_read_byte(int8u_t ack)$/;"	f
SCCB_start	BSP/ref/ov76602/sccb.c	/^void SCCB_start(void)$/;"	f
SCCB_start	BSP/sccb.c	/^void SCCB_start(void)$/;"	f
SCCB_stop	BSP/ref/ov76602/sccb.c	/^void SCCB_stop(void)$/;"	f
SCCB_stop	BSP/sccb.c	/^void SCCB_stop(void)$/;"	f
SCCB_write_byte	BSP/ref/ov76602/sccb.c	/^U8 SCCB_write_byte(U8 data)$/;"	f
SCCB_write_byte	BSP/sccb.c	/^int8u_t SCCB_write_byte(int8u_t data)$/;"	f
SD_DEBUG	BSP/ref/sd.h	12;"	d
SD_DEBUG	includes/sd.h	13;"	d
SETCLK	includes/spi.h	94;"	d
SETMOSI	includes/spi.h	92;"	d
SHORT	includes/integer.h	/^typedef short				SHORT;$/;"	t
SILENT	Makefile	/^SILENT= $/;"	m
SLV_DESELECT	includes/spi.h	72;"	d
SLV_SELECT	includes/spi.h	71;"	d
SM_ADPCM	includes/VS1003x.h	47;"	d
SM_ADPCM_HP	includes/VS1003x.h	48;"	d
SM_DACT	includes/VS1003x.h	43;"	d
SM_DIFF	includes/VS1003x.h	35;"	d
SM_JUMP	includes/VS1003x.h	36;"	d
SM_OUTOFWAV	includes/VS1003x.h	38;"	d
SM_PDOWN	includes/VS1003x.h	39;"	d
SM_PLUSV	includes/VS1003x.h	42;"	d
SM_RESET	includes/VS1003x.h	37;"	d
SM_SDINEW	includes/VS1003x.h	46;"	d
SM_SDIORD	includes/VS1003x.h	44;"	d
SM_SDISHARE	includes/VS1003x.h	45;"	d
SM_STREAM	includes/VS1003x.h	41;"	d
SM_TESTS	includes/VS1003x.h	40;"	d
SOFT_VERSION	includes/includes.h	104;"	d
SPARC_PREFIX	Makefile	/^SPARC_PREFIX=sparc-elf-$/;"	m
SPI2_CLK	includes/spi.h	87;"	d
SPI2_HIGH	includes/spi.h	89;"	d
SPI2_LOW	includes/spi.h	90;"	d
SPI2_MISO	includes/spi.h	86;"	d
SPI2_MOSI	includes/spi.h	85;"	d
SPI_AIADDR	includes/VS1003x.h	28;"	d
SPI_AICTRL0	includes/VS1003x.h	30;"	d
SPI_AICTRL1	includes/VS1003x.h	31;"	d
SPI_AICTRL2	includes/VS1003x.h	32;"	d
SPI_AICTRL3	includes/VS1003x.h	33;"	d
SPI_AUDATA	includes/VS1003x.h	22;"	d
SPI_BASE	includes/fpga.h	14;"	d
SPI_BASS	includes/VS1003x.h	19;"	d
SPI_CAP	includes/spi.h	13;"	d
SPI_CAP_AMODE	includes/spi.h	26;"	d
SPI_CAP_ASELA	includes/spi.h	25;"	d
SPI_CAP_FDEPTH	includes/spi.h	23;"	d
SPI_CAP_MAXWLEN	includes/spi.h	28;"	d
SPI_CAP_REV	includes/spi.h	22;"	d
SPI_CAP_SSEN	includes/spi.h	24;"	d
SPI_CAP_SSSZ	includes/spi.h	29;"	d
SPI_CAP_TWEN	includes/spi.h	27;"	d
SPI_CLOCKF	includes/VS1003x.h	20;"	d
SPI_CMD	includes/spi.h	17;"	d
SPI_CMD_LST	includes/spi.h	65;"	d
SPI_DECODE_TIME	includes/VS1003x.h	21;"	d
SPI_EVE	includes/spi.h	15;"	d
SPI_EVE_LT	includes/spi.h	54;"	d
SPI_EVE_MME	includes/spi.h	51;"	d
SPI_EVE_NE	includes/spi.h	50;"	d
SPI_EVE_NF	includes/spi.h	49;"	d
SPI_EVE_OV	includes/spi.h	53;"	d
SPI_EVE_TIP	includes/spi.h	55;"	d
SPI_EVE_UR	includes/spi.h	52;"	d
SPI_HDAT0	includes/VS1003x.h	25;"	d
SPI_HDAT1	includes/VS1003x.h	26;"	d
SPI_H_	includes/spi.h	9;"	d
SPI_MOD	includes/spi.h	14;"	d
SPI_MODE	includes/VS1003x.h	17;"	d
SPI_MOD_AMEN	includes/spi.h	47;"	d
SPI_MOD_ASEL	includes/spi.h	36;"	d
SPI_MOD_ASELDEL	includes/spi.h	32;"	d
SPI_MOD_CG	includes/spi.h	33;"	d
SPI_MOD_CPHA	includes/spi.h	44;"	d
SPI_MOD_CPOL	includes/spi.h	45;"	d
SPI_MOD_DIV16	includes/spi.h	43;"	d
SPI_MOD_EN	includes/spi.h	40;"	d
SPI_MOD_FACT	includes/spi.h	35;"	d
SPI_MOD_LEN	includes/spi.h	39;"	d
SPI_MOD_LOOP	includes/spi.h	46;"	d
SPI_MOD_MS	includes/spi.h	41;"	d
SPI_MOD_OD	includes/spi.h	34;"	d
SPI_MOD_PM	includes/spi.h	38;"	d
SPI_MOD_REV	includes/spi.h	42;"	d
SPI_MOD_TAC	includes/spi.h	31;"	d
SPI_MOD_TW	includes/spi.h	37;"	d
SPI_MSK	includes/spi.h	16;"	d
SPI_MSK_LTE	includes/spi.h	62;"	d
SPI_MSK_MMEE	includes/spi.h	59;"	d
SPI_MSK_NEE	includes/spi.h	58;"	d
SPI_MSK_NFE	includes/spi.h	57;"	d
SPI_MSK_OVE	includes/spi.h	61;"	d
SPI_MSK_TIPE	includes/spi.h	63;"	d
SPI_MSK_UNE	includes/spi.h	60;"	d
SPI_RX	includes/spi.h	19;"	d
SPI_SLV	includes/spi.h	20;"	d
SPI_SLV_SLVSEL	includes/spi.h	68;"	d
SPI_SLV_SSSZ	includes/spi.h	67;"	d
SPI_STATUS	includes/VS1003x.h	18;"	d
SPI_TX	includes/spi.h	18;"	d
SPI_VOL	includes/VS1003x.h	29;"	d
SPI_WRAM	includes/VS1003x.h	23;"	d
SPI_WRAMADDR	includes/VS1003x.h	24;"	d
SS	BSP/ff.c	115;"	d	file:
SS	BSP/ff.c	117;"	d	file:
STACKSIZE	includes/lemon.h	17;"	d
STANDBY	includes/rf.h	14;"	d
STAT_DR	includes/uart.h	26;"	d
STAT_TE	includes/uart.h	28;"	d
STAT_TS	includes/uart.h	27;"	d
STA_NODISK	includes/diskio.h	43;"	d
STA_NOINIT	includes/diskio.h	42;"	d
STA_PROTECT	includes/diskio.h	44;"	d
STORE	BSP/ref/sd.h	/^typedef struct STORE$/;"	s
STORE	includes/sd.h	/^typedef struct STORE$/;"	s
ST_CLUST	BSP/ff.c	152;"	d	file:
ST_DWORD	includes/ff.h	325;"	d
ST_DWORD	includes/ff.h	330;"	d
ST_WORD	includes/ff.h	324;"	d
ST_WORD	includes/ff.h	329;"	d
SUBDIRS	Debug/sources.mk	/^SUBDIRS := \\$/;"	m
SUBDIRS	Makefile	/^SUBDIRS = Application Adpcm Stack BSP misc HAL$/;"	m
SYNC_PIN_RD	BSP/ref/ov76602/ov7660.h	29;"	d
SYNC_PIN_RD	includes/ov7660.h	21;"	d
SYSFRE	includes/fpga.h	11;"	d
SZ_DIR	BSP/ff.c	452;"	d	file:
SZ_PTE	BSP/ff.c	434;"	d	file:
S_UPPER_SRCS	Debug/sources.mk	/^S_UPPER_SRCS := $/;"	m
SectorsPerClust	BSP/ref/FAT32.h	/^    unsigned int  SectorsPerClust;	 \/\/每簇的扇区数$/;"	m	struct:FAT32_Init_Arg
SectorsPerClust	includes/FAT32.h	/^    unsigned int  SectorsPerClust;	 \/\/每簇的扇区数$/;"	m	struct:FAT32_Init_Arg
Size	BSP/ref/FAT32.h	/^    unsigned char Size[4];        \/\/分区的大小$/;"	m	struct:PartRecord
Size	includes/FAT32.h	/^    unsigned char Size[4];        \/\/分区的大小$/;"	m	struct:PartRecord
StartCylSect	BSP/ref/FAT32.h	/^    unsigned char StartCylSect[2];\/\/开始柱面与扇区$/;"	m	struct:PartRecord
StartCylSect	includes/FAT32.h	/^    unsigned char StartCylSect[2];\/\/开始柱面与扇区$/;"	m	struct:PartRecord
StartHead	BSP/ref/FAT32.h	/^    unsigned char StartHead;      \/\/分区的开始头$/;"	m	struct:PartRecord
StartHead	includes/FAT32.h	/^    unsigned char StartHead;      \/\/分区的开始头$/;"	m	struct:PartRecord
StartLBA	BSP/ref/FAT32.h	/^    unsigned char StartLBA[4];    \/\/分区的第一个扇区$/;"	m	struct:PartRecord
StartLBA	includes/FAT32.h	/^    unsigned char StartLBA[4];    \/\/分区的第一个扇区$/;"	m	struct:PartRecord
Stat	BSP/sd.c	/^static volatile DSTATUS Stat = STA_NOINIT;$/;"	v	file:
TCHAR	includes/ff.h	/^typedef WCHAR TCHAR;$/;"	t
TCHAR	includes/ff.h	/^typedef char TCHAR;$/;"	t
TOOLS_H_	includes/tools.h	11;"	d
TOPDIR	Makefile	/^TOPDIR	:= $(shell if [ "$$PWD" != "" ]; then echo $$PWD; else pwd; fi)$/;"	m
TRANSLATE	includes/translate.h	8;"	d
TRUE	includes/types.h	35;"	d
TX_INT	includes/uart.h	18;"	d
TYPES_H_	includes/types.h	9;"	d
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP1250(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP1251(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP1252(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP1253(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP1254(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP1255(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP437(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP720(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP737(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP775(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP850(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP852(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP855(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP857(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP858(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP862(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP866(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Tbl	includes/option/ccsbcs.c	/^const WCHAR Tbl[] = {	\/*  CP874(0x80-0xFF) to Unicode conversion table *\/$/;"	v	file:
Total_Size	BSP/ref/FAT32.h	/^    unsigned long Total_Size;            \/\/磁盘的总容量$/;"	m	struct:FAT32_Init_Arg
Total_Size	includes/FAT32.h	/^    unsigned long Total_Size;            \/\/磁盘的总容量$/;"	m	struct:FAT32_Init_Arg
UART0_BASE	includes/fpga.h	18;"	d
UART_H_	includes/uart.h	9;"	d
UCHAR	includes/integer.h	/^typedef unsigned char		UCHAR;$/;"	t
UINT	includes/integer.h	/^typedef unsigned int		UINT;$/;"	t
ULONG	includes/integer.h	/^typedef unsigned long		ULONG;$/;"	t
USER_OBJS	Debug/objects.mk	/^USER_OBJS :=$/;"	m
USHORT	includes/integer.h	/^typedef unsigned short	USHORT;$/;"	t
UZ2400D_H_	includes/uz2400d.h	9;"	d
UZL_GPIODIR	includes/uz2400d.h	65;"	d
UZL_RFCTRL0	includes/uz2400d.h	52;"	d
UZL_RFCTRL1	includes/uz2400d.h	53;"	d
UZL_RFCTRL2	includes/uz2400d.h	54;"	d
UZL_RFCTRL3	includes/uz2400d.h	55;"	d
UZL_RFCTRL4	includes/uz2400d.h	56;"	d
UZL_RFCTRL5	includes/uz2400d.h	57;"	d
UZL_RFCTRL50	includes/uz2400d.h	69;"	d
UZL_RFCTRL51	includes/uz2400d.h	70;"	d
UZL_RFCTRL52	includes/uz2400d.h	71;"	d
UZL_RFCTRL53	includes/uz2400d.h	72;"	d
UZL_RFCTRL59	includes/uz2400d.h	73;"	d
UZL_RFCTRL6	includes/uz2400d.h	58;"	d
UZL_RFCTRL7	includes/uz2400d.h	59;"	d
UZL_RFCTRL73	includes/uz2400d.h	74;"	d
UZL_RFCTRL74	includes/uz2400d.h	75;"	d
UZL_RFCTRL75	includes/uz2400d.h	76;"	d
UZL_RFCTRL76	includes/uz2400d.h	77;"	d
UZL_RFCTRL8	includes/uz2400d.h	60;"	d
UZL_RFSTATE	includes/uz2400d.h	62;"	d
UZL_SECCTRL	includes/uz2400d.h	66;"	d
UZL_TESTMODE	includes/uz2400d.h	63;"	d
UZS_BBREG3	includes/uz2400d.h	46;"	d
UZS_BBREG4	includes/uz2400d.h	47;"	d
UZS_BBREG5	includes/uz2400d.h	48;"	d
UZS_BBREG6	includes/uz2400d.h	49;"	d
UZS_EADR_0	includes/uz2400d.h	20;"	d
UZS_EADR_1	includes/uz2400d.h	21;"	d
UZS_EADR_2	includes/uz2400d.h	22;"	d
UZS_EADR_3	includes/uz2400d.h	23;"	d
UZS_EADR_4	includes/uz2400d.h	24;"	d
UZS_EADR_5	includes/uz2400d.h	25;"	d
UZS_EADR_6	includes/uz2400d.h	26;"	d
UZS_EADR_7	includes/uz2400d.h	27;"	d
UZS_FIFOEN	includes/uz2400d.h	31;"	d
UZS_GATECLK	includes/uz2400d.h	36;"	d
UZS_INTMSK	includes/uz2400d.h	41;"	d
UZS_ISRSTS	includes/uz2400d.h	40;"	d
UZS_ISRSTS_MACTMRIF	includes/uz2400d.h	89;"	d
UZS_ISRSTS_RXIF	includes/uz2400d.h	87;"	d
UZS_ISRSTS_SECIF	includes/uz2400d.h	88;"	d
UZS_ISRSTS_SLPIF	includes/uz2400d.h	91;"	d
UZS_ISRSTS_TXG1IF	includes/uz2400d.h	85;"	d
UZS_ISRSTS_TXG2IF	includes/uz2400d.h	86;"	d
UZS_ISRSTS_TXNIF	includes/uz2400d.h	84;"	d
UZS_ISRSTS_WAKEIF	includes/uz2400d.h	90;"	d
UZS_PACON1	includes/uz2400d.h	30;"	d
UZS_PANIDH	includes/uz2400d.h	15;"	d
UZS_PANIDL	includes/uz2400d.h	14;"	d
UZS_RFCTL	includes/uz2400d.h	44;"	d
UZS_RXFLUSH	includes/uz2400d.h	29;"	d
UZS_SADRH	includes/uz2400d.h	18;"	d
UZS_SADRL	includes/uz2400d.h	17;"	d
UZS_SLPACK	includes/uz2400d.h	42;"	d
UZS_SOFTRST	includes/uz2400d.h	37;"	d
UZS_TXNTRIG	includes/uz2400d.h	33;"	d
UZS_TXPEMISP	includes/uz2400d.h	38;"	d
UZS_TXSR	includes/uz2400d.h	35;"	d
UZS_TXSR_CCAFAIL	includes/uz2400d.h	98;"	d
UZS_TXSR_TXG1FNT	includes/uz2400d.h	96;"	d
UZS_TXSR_TXG1S	includes/uz2400d.h	94;"	d
UZS_TXSR_TXG2FNT	includes/uz2400d.h	97;"	d
UZS_TXSR_TXG2S	includes/uz2400d.h	95;"	d
UZS_TXSR_TXNS	includes/uz2400d.h	93;"	d
UZS_TXSR_TXRETRY	includes/uz2400d.h	99;"	d
VOLUME_INFO_TYPE	BSP/ref/sd.h	/^} VOLUME_INFO_TYPE; $/;"	t	typeref:struct:MMC_VOLUME_INFO
VOLUME_INFO_TYPE	includes/sd.h	/^} VOLUME_INFO_TYPE; $/;"	t	typeref:struct:MMC_VOLUME_INFO
VS1003_DEBUG	BSP/VS1003x.c	19;"	d	file:
VS_READ_COMMAND	includes/VS1003x.h	14;"	d
VS_WRITE_COMMAND	includes/VS1003x.h	13;"	d
Vs1003_CMD_Read	BSP/VS1003x.c	/^int16u_t Vs1003_CMD_Read(int8u_t address)$/;"	f
Vs1003_CMD_Write	BSP/VS1003x.c	/^void Vs1003_CMD_Write(int8u_t address,int16u_t data)$/;"	f
Vs1003_DATA_Write16	BSP/VS1003x.c	/^void Vs1003_DATA_Write16(int16u_t *data,int32u_t len)$/;"	f
Vs1003_DATA_Write32	BSP/VS1003x.c	/^void Vs1003_DATA_Write32(int32u_t *data,int32u_t len)$/;"	f
Vs1003_DATA_Write8	BSP/VS1003x.c	/^void Vs1003_DATA_Write8(int8u_t *data,int32u_t len)$/;"	f
Vs1003_Init	BSP/VS1003x.c	/^void Vs1003_Init(void)$/;"	f
Vs1003_Sine_Test	BSP/VS1003x.c	/^void Vs1003_Sine_Test(unsigned char x)$/;"	f
Vs1003_Test	BSP/VS1003x.c	/^void Vs1003_Test(void)$/;"	f
WAV16MONE	includes/application.h	8;"	d
WCHAR	includes/integer.h	/^typedef unsigned short	WCHAR;$/;"	t
WORD	includes/integer.h	/^typedef unsigned short	WORD;$/;"	t
WRITE_BLOCK_ERROR	BSP/ref/sd.h	18;"	d
WRITE_BLOCK_ERROR	includes/sd.h	19;"	d
Write_Command_MMC	BSP/ref/sd.c	/^unsigned char Write_Command_MMC(unsigned char cmd,unsigned long arg)$/;"	f
Write_Command_MMC	BSP/sd.c	/^unsigned char Write_Command_MMC(unsigned char cmd, unsigned long arg) {$/;"	f
XCLK_DIS	BSP/ref/ov76602/ov7660.h	42;"	d
XCLK_DIS	includes/ov7660.h	29;"	d
XCLK_EN	BSP/ref/ov76602/ov7660.h	41;"	d
XCLK_EN	includes/ov7660.h	28;"	d
XCLK_OUT	BSP/ref/ov76602/ov7660.h	38;"	d
_CODE_PAGE	includes/ffconf.h	61;"	d
_DEBUG_	includes/includes.h	64;"	d
_DF1E	BSP/ff.c	159;"	d	file:
_DF1E	BSP/ff.c	169;"	d	file:
_DF1E	BSP/ff.c	177;"	d	file:
_DF1E	BSP/ff.c	187;"	d	file:
_DF1S	BSP/ff.c	158;"	d	file:
_DF1S	BSP/ff.c	168;"	d	file:
_DF1S	BSP/ff.c	176;"	d	file:
_DF1S	BSP/ff.c	186;"	d	file:
_DF1S	BSP/ff.c	194;"	d	file:
_DF1S	BSP/ff.c	201;"	d	file:
_DF1S	BSP/ff.c	208;"	d	file:
_DF1S	BSP/ff.c	215;"	d	file:
_DF1S	BSP/ff.c	222;"	d	file:
_DF1S	BSP/ff.c	229;"	d	file:
_DF1S	BSP/ff.c	236;"	d	file:
_DF1S	BSP/ff.c	243;"	d	file:
_DF1S	BSP/ff.c	250;"	d	file:
_DF1S	BSP/ff.c	257;"	d	file:
_DF1S	BSP/ff.c	264;"	d	file:
_DF1S	BSP/ff.c	271;"	d	file:
_DF1S	BSP/ff.c	278;"	d	file:
_DF1S	BSP/ff.c	285;"	d	file:
_DF1S	BSP/ff.c	292;"	d	file:
_DF1S	BSP/ff.c	299;"	d	file:
_DF1S	BSP/ff.c	306;"	d	file:
_DF1S	BSP/ff.c	313;"	d	file:
_DF1S	BSP/ff.c	320;"	d	file:
_DF1S	BSP/ff.c	327;"	d	file:
_DF1S	BSP/ff.c	334;"	d	file:
_DF1S	BSP/ff.c	344;"	d	file:
_DF2E	BSP/ff.c	161;"	d	file:
_DF2S	BSP/ff.c	160;"	d	file:
_DISKIO	includes/diskio.h	77;"	d
_DS1E	BSP/ff.c	163;"	d	file:
_DS1E	BSP/ff.c	171;"	d	file:
_DS1E	BSP/ff.c	179;"	d	file:
_DS1E	BSP/ff.c	189;"	d	file:
_DS1S	BSP/ff.c	162;"	d	file:
_DS1S	BSP/ff.c	170;"	d	file:
_DS1S	BSP/ff.c	178;"	d	file:
_DS1S	BSP/ff.c	188;"	d	file:
_DS2E	BSP/ff.c	165;"	d	file:
_DS2E	BSP/ff.c	173;"	d	file:
_DS2E	BSP/ff.c	181;"	d	file:
_DS2E	BSP/ff.c	191;"	d	file:
_DS2S	BSP/ff.c	164;"	d	file:
_DS2S	BSP/ff.c	172;"	d	file:
_DS2S	BSP/ff.c	180;"	d	file:
_DS2S	BSP/ff.c	190;"	d	file:
_DS3E	BSP/ff.c	183;"	d	file:
_DS3S	BSP/ff.c	182;"	d	file:
_EXCVT	BSP/ff.c	195;"	d	file:
_EXCVT	BSP/ff.c	202;"	d	file:
_EXCVT	BSP/ff.c	209;"	d	file:
_EXCVT	BSP/ff.c	216;"	d	file:
_EXCVT	BSP/ff.c	223;"	d	file:
_EXCVT	BSP/ff.c	230;"	d	file:
_EXCVT	BSP/ff.c	237;"	d	file:
_EXCVT	BSP/ff.c	244;"	d	file:
_EXCVT	BSP/ff.c	251;"	d	file:
_EXCVT	BSP/ff.c	258;"	d	file:
_EXCVT	BSP/ff.c	265;"	d	file:
_EXCVT	BSP/ff.c	272;"	d	file:
_EXCVT	BSP/ff.c	279;"	d	file:
_EXCVT	BSP/ff.c	286;"	d	file:
_EXCVT	BSP/ff.c	293;"	d	file:
_EXCVT	BSP/ff.c	300;"	d	file:
_EXCVT	BSP/ff.c	307;"	d	file:
_EXCVT	BSP/ff.c	314;"	d	file:
_EXCVT	BSP/ff.c	321;"	d	file:
_EXCVT	BSP/ff.c	328;"	d	file:
_EXCVT	BSP/ff.c	335;"	d	file:
_FATFS	includes/ff.h	18;"	d
_FFCONF	includes/ffconf.h	10;"	d
_FS_MINIMIZE	includes/ffconf.h	29;"	d
_FS_READONLY	includes/ffconf.h	23;"	d
_FS_REENTRANT	includes/ffconf.h	174;"	d
_FS_RPATH	includes/ffconf.h	114;"	d
_FS_SHARE	includes/ffconf.h	186;"	d
_FS_TIMEOUT	includes/ffconf.h	175;"	d
_FS_TINY	includes/ffconf.h	17;"	d
_INTEGER	includes/integer.h	6;"	d
_LFN_UNICODE	includes/ffconf.h	109;"	d
_MAX_LFN	includes/ffconf.h	95;"	d
_MAX_SS	includes/ffconf.h	133;"	d
_MULTI_PARTITION	includes/ffconf.h	141;"	d
_OV7660_H	includes/ov7660.h	2;"	d
_OV7660_H_	BSP/ref/ov76602/ov7660.h	17;"	d
_READONLY	includes/diskio.h	7;"	d
_SCCB_H	includes/sccb.h	2;"	d
_SCCB_H_	BSP/ref/ov76602/sccb.h	21;"	d
_SD_H	BSP/ref/sd.h	2;"	d
_SD_H	includes/sd.h	2;"	d
_SYNC_t	includes/ffconf.h	176;"	d
_T	includes/ff.h	60;"	d
_T	includes/ff.h	67;"	d
_TBLDEF	includes/option/ccsbcs.c	120;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	142;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	164;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	186;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	208;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	230;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	252;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	274;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	296;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	318;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	32;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	340;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	362;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	384;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	406;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	428;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	54;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	76;"	d	file:
_TBLDEF	includes/option/ccsbcs.c	98;"	d	file:
_TEXT	includes/ff.h	61;"	d
_TEXT	includes/ff.h	68;"	d
_TINY_TABLE	includes/option/cc932.c	9;"	d	file:
_USE_ERASE	includes/ffconf.h	147;"	d
_USE_FASTSEEK	includes/ffconf.h	51;"	d
_USE_FORWARD	includes/ffconf.h	47;"	d
_USE_IOCTL	includes/diskio.h	8;"	d
_USE_LFN	includes/ffconf.h	94;"	d
_USE_MKFS	includes/ffconf.h	43;"	d
_USE_STRFUNC	includes/ffconf.h	39;"	d
_VOLUMES	includes/ffconf.h	129;"	d
_WORD_ACCESS	includes/ffconf.h	157;"	d
__VS1003_H__	includes/VS1003x.h	2;"	d
_dprintf_	lemon.c	/^void _dprintf_(const char *format, ...) {$/;"	f
ack_req	includes/ieee802_15_4.h	/^		u16_t ack_req:1;$/;"	m	struct:frm_ctrl
adpbuffer	Application/application.c	/^short adpbuffer[ONCELEN*2]= {0};$/;"	v
adpcm_coder	Adpcm/adpcm.c	/^void adpcm_coder(short indata[], char outdata[], int len, struct adpcm_state *state)$/;"	f
adpcm_decoder	Adpcm/adpcm.c	/^void adpcm_decoder(char indata[], short outdata[], int len, struct adpcm_state *state)$/;"	f
adpcm_state	includes/adpcm.h	/^struct adpcm_state$/;"	s
adpcpd	Application/application.c	/^char adpcpd[ONCELEN];$/;"	v
apbuart_test	HAL/apbuart.c	/^int apbuart_test(unsigned int base)$/;"	f
apbuart_test	HAL/uart.c	/^int apbuart_test(int addr) {$/;"	f
audioDHandle	Application/application.c	/^void audioDHandle(void * buffer, int32u_t length)$/;"	f
audioFSend	Application/application.c	/^void audioFSend(void * buffer, int32u_t length, int8u_t types, int32u_t delaytime )$/;"	f
buf	includes/ff.h	/^	BYTE	buf[_MAX_SS];	\/* File data read\/write buffer *\/$/;"	m	struct:__anon5
buffera	includes/translate.h	/^	u8_t   buffera[REVBUFSIZE];       $/;"	m	struct:PortBuf
bufferb	includes/translate.h	/^	u8_t   bufferb[REVBUFSIZE];$/;"	m	struct:PortBuf
cdir	includes/ff.h	/^	DWORD	cdir;			\/* Current directory start cluster (0:root) *\/$/;"	m	struct:__anon4
check_cpu_endien	HAL/tools.c	/^int check_cpu_endien() {$/;"	f
check_fs	BSP/ff.c	/^BYTE check_fs (	\/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error *\/$/;"	f	file:
chk_chr	BSP/ff.c	/^int chk_chr (const char* str, int chr) {$/;"	f	file:
chk_lock	BSP/ff.c	/^FRESULT chk_lock (	\/* Check if the file can be accessed *\/$/;"	f	file:
chk_mounted	BSP/ff.c	/^FRESULT chk_mounted (	\/* FR_OK(0): successful, !=0: any error occurred *\/$/;"	f	file:
clear_lock	BSP/ff.c	/^void clear_lock (	\/* Clear lock entries of the volume *\/$/;"	f	file:
cliblock	lemon.c	/^cyg_mutex_t cliblock;$/;"	v
clmt_clust	BSP/ff.c	/^DWORD clmt_clust (	\/* <2:Error, >=2:Cluster number *\/$/;"	f	file:
cltbl	includes/ff.h	/^	DWORD*	cltbl;			\/* Pointer to the cluster link map table (null on file open) *\/$/;"	m	struct:__anon5
clu	BSP/ff.c	/^	DWORD clu;				\/* File ID 2, directory *\/$/;"	m	struct:__anon1	file:
clust	includes/ff.h	/^	DWORD	clust;			\/* Current cluster *\/$/;"	m	struct:__anon5
clust	includes/ff.h	/^	DWORD	clust;			\/* Current cluster *\/$/;"	m	struct:__anon6
clust2sect	BSP/ff.c	/^DWORD clust2sect (	\/* !=0: Sector number, 0: Failed - invalid cluster# *\/$/;"	f
cmp_lfn	BSP/ff.c	/^int cmp_lfn (			\/* 1:Matched, 0:Not matched *\/$/;"	f	file:
count	BSP/VS1003x.c	/^static unsigned long count = 0;$/;"	v	file:
create_chain	BSP/ff.c	/^DWORD create_chain (	\/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# *\/$/;"	f	file:
create_name	BSP/ff.c	/^FRESULT create_name ($/;"	f	file:
csize	includes/ff.h	/^	BYTE	csize;			\/* Sectors per cluster (1,2,4...128) *\/$/;"	m	struct:__anon4
ctr	BSP/ff.c	/^	WORD ctr;				\/* File open counter, 0:none, 0x01..0xFF:read open count, 0x100:write mode *\/$/;"	m	struct:__anon1	file:
d_mac	includes/translate.h	/^	u16_t  d_mac;         \/*destination mac address*\/$/;"	m	struct:PacketHead
d_port	includes/translate.h	/^	u8_t    d_port;       \/*destion port number, decide which PortBuf put this frame to *\/$/;"	m	struct:FrameHead
d_port	includes/translate.h	/^	u8_t   d_port;        \/*destination port number*\/$/;"	m	struct:PacketHead
dat	BSP/ref/sd.h	/^  unsigned char dat[100]; $/;"	m	struct:STORE
dat	includes/sd.h	/^  unsigned char dat[100]; $/;"	m	struct:STORE
data_cnt	BSP/ov7660.c	/^static int32u_t data_cnt;$/;"	v	file:
database	includes/ff.h	/^	DWORD	database;		\/* Data start sector *\/$/;"	m	struct:__anon4
deADate	BSP/ref/FAT32.h	/^    unsigned char deADate[2];     	\/\/ access date$/;"	m	struct:direntry
deADate	includes/FAT32.h	/^    unsigned char deADate[2];     	\/\/ access date$/;"	m	struct:direntry
deAttributes	BSP/ref/FAT32.h	/^    unsigned char deAttributes;   	\/\/ file attributes$/;"	m	struct:direntry
deAttributes	includes/FAT32.h	/^    unsigned char deAttributes;   	\/\/ file attributes$/;"	m	struct:direntry
deCDate	BSP/ref/FAT32.h	/^    unsigned char deCDate[2];     	\/\/ create date$/;"	m	struct:direntry
deCDate	includes/FAT32.h	/^    unsigned char deCDate[2];     	\/\/ create date$/;"	m	struct:direntry
deCHundredth	BSP/ref/FAT32.h	/^    unsigned char deCHundredth;   	\/\/ hundredth of seconds in CTime$/;"	m	struct:direntry
deCHundredth	includes/FAT32.h	/^    unsigned char deCHundredth;   	\/\/ hundredth of seconds in CTime$/;"	m	struct:direntry
deCTime	BSP/ref/FAT32.h	/^    unsigned char deCTime[2];     	\/\/ create time$/;"	m	struct:direntry
deCTime	includes/FAT32.h	/^    unsigned char deCTime[2];     	\/\/ create time$/;"	m	struct:direntry
deExtension	BSP/ref/FAT32.h	/^    unsigned char deExtension[3]; 	\/\/ extension, blank filled$/;"	m	struct:direntry
deExtension	includes/FAT32.h	/^    unsigned char deExtension[3]; 	\/\/ extension, blank filled$/;"	m	struct:direntry
deFileSize	BSP/ref/FAT32.h	/^    unsigned char deFileSize[4];      \/\/ size of file in unsigned chars$/;"	m	struct:direntry
deFileSize	includes/FAT32.h	/^    unsigned char deFileSize[4];      \/\/ size of file in unsigned chars$/;"	m	struct:direntry
deHighClust	BSP/ref/FAT32.h	/^    unsigned char deHighClust[2];     \/\/ high unsigned chars of cluster number$/;"	m	struct:direntry
deHighClust	includes/FAT32.h	/^    unsigned char deHighClust[2];     \/\/ high unsigned chars of cluster number$/;"	m	struct:direntry
deLowCluster	BSP/ref/FAT32.h	/^    unsigned char deLowCluster[2]; 	\/\/ starting cluster of file$/;"	m	struct:direntry
deLowCluster	includes/FAT32.h	/^    unsigned char deLowCluster[2]; 	\/\/ starting cluster of file$/;"	m	struct:direntry
deLowerCase	BSP/ref/FAT32.h	/^    unsigned char deLowerCase;    	\/\/ NT VFAT lower case flags  (set to zero)$/;"	m	struct:direntry
deLowerCase	includes/FAT32.h	/^    unsigned char deLowerCase;    	\/\/ NT VFAT lower case flags  (set to zero)$/;"	m	struct:direntry
deMDate	BSP/ref/FAT32.h	/^    unsigned char deMDate[2];     	\/\/ last update date$/;"	m	struct:direntry
deMDate	includes/FAT32.h	/^    unsigned char deMDate[2];     	\/\/ last update date$/;"	m	struct:direntry
deMTime	BSP/ref/FAT32.h	/^    unsigned char deMTime[2];     	\/\/ last update time$/;"	m	struct:direntry
deMTime	includes/FAT32.h	/^    unsigned char deMTime[2];     	\/\/ last update time$/;"	m	struct:direntry
deName	BSP/ref/FAT32.h	/^    unsigned char deName[8];       \/\/ filename, blank filled$/;"	m	struct:direntry
deName	includes/FAT32.h	/^    unsigned char deName[8];       \/\/ filename, blank filled$/;"	m	struct:direntry
dec_lock	BSP/ff.c	/^FRESULT dec_lock (	\/* Decrement file open counter *\/$/;"	f	file:
delay_ms	BSP/VS1003x.c	/^void delay_ms(unsigned int num)$/;"	f
delayus	BSP/sd.c	/^static void delayus(unsigned int num) {$/;"	f	file:
delayus	HAL/tools.c	/^void delayus(int32u_t us) {$/;"	f
des_ADDR	includes/ieee802_15_4.h	/^	int8u_t des_ADDR[2];$/;"	m	struct:ieee15_4_mac_hdr
des_PANID	includes/ieee802_15_4.h	/^	int8u_t des_PANID[2];$/;"	m	struct:ieee15_4_mac_hdr
dir	includes/ff.h	/^	BYTE*	dir;			\/* Pointer to the current SFN entry in the win[] *\/$/;"	m	struct:__anon6
dir_find	BSP/ff.c	/^FRESULT dir_find ($/;"	f	file:
dir_next	BSP/ff.c	/^FRESULT dir_next (	\/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch *\/$/;"	f	file:
dir_ptr	includes/ff.h	/^	BYTE*	dir_ptr;		\/* Ponter to the directory entry in the window *\/$/;"	m	struct:__anon5
dir_read	BSP/ff.c	/^FRESULT dir_read ($/;"	f	file:
dir_register	BSP/ff.c	/^FRESULT dir_register (	\/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error *\/$/;"	f	file:
dir_remove	BSP/ff.c	/^FRESULT dir_remove (	\/* FR_OK: Successful, FR_DISK_ERR: A disk error *\/$/;"	f	file:
dir_sdi	BSP/ff.c	/^FRESULT dir_sdi ($/;"	f	file:
dir_sect	includes/ff.h	/^	DWORD	dir_sect;		\/* Sector containing the directory entry *\/$/;"	m	struct:__anon5
dirbase	includes/ff.h	/^	DWORD	dirbase;		\/* Root directory start sector (FAT32:Cluster#) *\/$/;"	m	struct:__anon4
direntry	BSP/ref/FAT32.h	/^struct direntry$/;"	s
direntry	includes/FAT32.h	/^struct direntry$/;"	s
disk_initialize	BSP/sd.c	/^DSTATUS disk_initialize(BYTE drv) {$/;"	f
disk_ioctl	BSP/sd.c	/^DRESULT disk_ioctl(BYTE drv, \/* Physical drive number (0) *\/$/;"	f
disk_read	BSP/sd.c	/^DRESULT disk_read(BYTE drv, \/* Physical drive number (0) *\/$/;"	f
disk_status	BSP/sd.c	/^DSTATUS disk_status(BYTE drv \/* Physical drive number (0) *\/$/;"	f
disk_write	BSP/sd.c	/^DRESULT disk_write(BYTE drv, \/* Physical drive number (0) *\/$/;"	f
disk_write2	BSP/sd.c	/^DRESULT disk_write2(BYTE drv, \/* Physical drive number (0) *\/$/;"	f
dprintf	includes/includes.h	76;"	d
dprintf	includes/includes.h	79;"	d
dprintf	includes/includes.h	83;"	d
drv	includes/ff.h	/^	BYTE	drv;			\/* Physical drive number *\/$/;"	m	struct:__anon4
dsect	includes/ff.h	/^	DWORD	dsect;			\/* Current data sector *\/$/;"	m	struct:__anon5
dsr_network	Stack/translate.c	/^void dsr_network(void)$/;"	f
dstaddr_mode	includes/ieee802_15_4.h	/^	u16_t dstaddr_mode:2;$/;"	m	struct:frm_ctrl
enq_lock	BSP/ff.c	/^int enq_lock (void)	\/* Check if an entry is available for a new file *\/$/;"	f	file:
f_chdir	BSP/ff.c	/^FRESULT f_chdir ($/;"	f
f_chdrive	BSP/ff.c	/^FRESULT f_chdrive ($/;"	f
f_chmod	BSP/ff.c	/^FRESULT f_chmod ($/;"	f
f_close	BSP/ff.c	/^FRESULT f_close ($/;"	f
f_eof	includes/ff.h	233;"	d
f_error	includes/ff.h	234;"	d
f_fdisk	BSP/ff.c	/^FRESULT f_fdisk ($/;"	f
f_forward	BSP/ff.c	/^FRESULT f_forward ($/;"	f
f_getcwd	BSP/ff.c	/^FRESULT f_getcwd ($/;"	f
f_getfree	BSP/ff.c	/^FRESULT f_getfree ($/;"	f
f_gets	BSP/ff.c	/^TCHAR* f_gets ($/;"	f
f_insert	Stack/translate.c	/^mybool f_insert(void * buffer, u8_t size)$/;"	f
f_lseek	BSP/ff.c	/^FRESULT f_lseek ($/;"	f
f_mkdir	BSP/ff.c	/^FRESULT f_mkdir ($/;"	f
f_mkfs	BSP/ff.c	/^FRESULT f_mkfs ($/;"	f
f_mount	BSP/ff.c	/^FRESULT f_mount ($/;"	f
f_open	BSP/ff.c	/^FRESULT f_open ($/;"	f
f_opendir	BSP/ff.c	/^FRESULT f_opendir ($/;"	f
f_printf	BSP/ff.c	/^int f_printf ($/;"	f
f_putc	BSP/ff.c	/^int f_putc ($/;"	f
f_puts	BSP/ff.c	/^int f_puts ($/;"	f
f_read	BSP/ff.c	/^FRESULT f_read ($/;"	f
f_readdir	BSP/ff.c	/^FRESULT f_readdir ($/;"	f
f_rename	BSP/ff.c	/^FRESULT f_rename ($/;"	f
f_size	includes/ff.h	236;"	d
f_stat	BSP/ff.c	/^FRESULT f_stat ($/;"	f
f_sync	BSP/ff.c	/^FRESULT f_sync ($/;"	f
f_tell	includes/ff.h	235;"	d
f_truncate	BSP/ff.c	/^FRESULT f_truncate ($/;"	f
f_unlink	BSP/ff.c	/^FRESULT f_unlink ($/;"	f
f_utime	BSP/ff.c	/^FRESULT f_utime ($/;"	f
f_write	BSP/ff.c	/^FRESULT f_write ($/;"	f
fail	HAL/apbuart.c	/^void inline fail(int fail_code) {$/;"	f
fatbase	includes/ff.h	/^	DWORD	fatbase;		\/* FAT start sector *\/$/;"	m	struct:__anon4
fattrib	includes/ff.h	/^	BYTE	fattrib;		\/* Attribute *\/$/;"	m	struct:__anon7
fdate	includes/ff.h	/^	WORD	fdate;			\/* Last modified date *\/$/;"	m	struct:__anon7
ff_convert	includes/option/cc932.c	/^WCHAR ff_convert (	\/* Converted code, 0 means conversion error *\/$/;"	f
ff_convert	includes/option/cc936.c	/^WCHAR ff_convert (	\/* Converted code, 0 means conversion error *\/$/;"	f
ff_convert	includes/option/cc949.c	/^WCHAR ff_convert (	\/* Converted code, 0 means conversion error *\/$/;"	f
ff_convert	includes/option/cc950.c	/^WCHAR ff_convert (	\/* Converted code, 0 means conversion error *\/$/;"	f
ff_cre_syncobj	includes/option/syscall.c	/^int ff_cre_syncobj (	\/* TRUE:Function succeeded, FALSE:Could not create due to any error *\/$/;"	f
ff_del_syncobj	includes/option/syscall.c	/^int ff_del_syncobj (	\/* TRUE:Function succeeded, FALSE:Could not delete due to any error *\/$/;"	f
ff_memalloc	includes/option/syscall.c	/^void* ff_memalloc (	\/* Returns pointer to the allocated memory block *\/$/;"	f
ff_memfree	includes/option/syscall.c	/^void ff_memfree($/;"	f
ff_rel_grant	includes/option/syscall.c	/^void ff_rel_grant ($/;"	f
ff_req_grant	includes/option/syscall.c	/^int ff_req_grant (	\/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant *\/$/;"	f
ff_wtoupper	includes/option/cc932.c	/^WCHAR ff_wtoupper (	\/* Upper converted character *\/$/;"	f
ff_wtoupper	includes/option/cc936.c	/^WCHAR ff_wtoupper (	\/* Upper converted character *\/$/;"	f
ff_wtoupper	includes/option/cc949.c	/^WCHAR ff_wtoupper (	\/* Upper converted character *\/$/;"	f
ff_wtoupper	includes/option/cc950.c	/^WCHAR ff_wtoupper (	\/* Upper converted character *\/$/;"	f
fit_lfn	BSP/ff.c	/^void fit_lfn ($/;"	f	file:
fl_len	includes/translate.h	/^	s8_t    fl_len;       \/*frame body length beside framehead and mac head  	    *\/$/;"	m	struct:FrameHead
flag	includes/ff.h	/^	BYTE	flag;			\/* File status flags *\/$/;"	m	struct:__anon5
fn	includes/ff.h	/^	BYTE*	fn;				\/* Pointer to the SFN (in\/out) {file[8],ext[3],status[1]} *\/$/;"	m	struct:__anon6
fname	includes/ff.h	/^	TCHAR	fname[13];		\/* Short file name (8.3 format) *\/$/;"	m	struct:__anon7
follow_path	BSP/ff.c	/^FRESULT follow_path (	\/* FR_OK(0): successful, !=0: error code *\/$/;"	f	file:
fptr	includes/ff.h	/^	DWORD	fptr;			\/* File read\/write pointer (0 on file open) *\/$/;"	m	struct:__anon5
frame_ctl	includes/ieee802_15_4.h	/^	frm_ctrl_t frame_ctl;$/;"	m	struct:ieee15_4_mac_hdr
free_clust	includes/ff.h	/^	DWORD	free_clust;		\/* Number of free clusters *\/$/;"	m	struct:__anon4
frm_ctrl	includes/ieee802_15_4.h	/^typedef struct frm_ctrl$/;"	s
frm_ctrl_t	includes/ieee802_15_4.h	/^} frm_ctrl_t;$/;"	t	typeref:struct:frm_ctrl
frm_pending	includes/ieee802_15_4.h	/^		u16_t frm_pending:1;$/;"	m	struct:frm_ctrl
frm_type	includes/ieee802_15_4.h	/^		u16_t frm_type:3;$/;"	m	struct:frm_ctrl
frm_ver	includes/ieee802_15_4.h	/^	u16_t frm_ver:2;$/;"	m	struct:frm_ctrl
fs	BSP/ff.c	/^	FATFS *fs;				\/* File ID 1, volume (NULL:blank entry) *\/$/;"	m	struct:__anon1	file:
fs	includes/ff.h	/^	FATFS*	fs;				\/* Pointer to the owner file system object *\/$/;"	m	struct:__anon5
fs	includes/ff.h	/^	FATFS*	fs;				\/* Pointer to the owner file system object *\/$/;"	m	struct:__anon6
fs_test	BSP/ff.c	/^void fs_test() {$/;"	f
fs_type	includes/ff.h	/^	BYTE	fs_type;		\/* FAT sub-type (0:Not mounted) *\/$/;"	m	struct:__anon4
fsi_flag	includes/ff.h	/^	BYTE	fsi_flag;		\/* fsinfo dirty flag (1:must be written back) *\/$/;"	m	struct:__anon4
fsi_sector	includes/ff.h	/^	DWORD	fsi_sector;		\/* fsinfo sector (FAT32) *\/$/;"	m	struct:__anon4
fsize	includes/ff.h	/^	DWORD	fsize;			\/* File size *\/$/;"	m	struct:__anon5
fsize	includes/ff.h	/^	DWORD	fsize;			\/* File size *\/$/;"	m	struct:__anon7
fsize	includes/ff.h	/^	DWORD	fsize;			\/* Sectors per FAT *\/$/;"	m	struct:__anon4
ftime	includes/ff.h	/^	WORD	ftime;			\/* Last modified time *\/$/;"	m	struct:__anon7
fulla	includes/translate.h	/^	mybool fulla;	      \/*whether buffer a receive a complete packet*\/$/;"	m	struct:PortBuf
fullb	includes/translate.h	/^	mybool fullb;         \/*whether buffer b receive a complete packet*\/$/;"	m	struct:PortBuf
gen_numname	BSP/ff.c	/^void gen_numname ($/;"	f
get_fat	BSP/ff.c	/^DWORD get_fat (	\/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status *\/$/;"	f
get_fattime	BSP/sd.c	/^DWORD get_fattime(void) {$/;"	f
get_fileinfo	BSP/ff.c	/^void get_fileinfo (		\/* No return code *\/$/;"	f	file:
getkey	Stack/translate.c	/^mybool getkey(s8_t keynum)$/;"	f
gpio_clr	HAL/gpio.c	/^inline void gpio_clr(int8u_t pbase, int8u_t pmask) {$/;"	f
gpio_init	HAL/gpio.c	/^inline void gpio_init(int8u_t pbase, int16u_t pmask) {$/;"	f
gpio_init_gpio	HAL/gpio.c	/^inline void gpio_init_gpio(int8u_t pbase, int8u_t pmask) {$/;"	f
gpio_make_in	HAL/gpio.c	/^inline void gpio_make_in(int8u_t pbase, int8u_t pmask) {$/;"	f
gpio_make_out	HAL/gpio.c	/^inline void gpio_make_out(int8u_t pbase, int8u_t pmask) {$/;"	f
gpio_read	HAL/gpio.c	/^inline int16u_t gpio_read(int8u_t pbase, int8u_t pmask) {$/;"	f
gpio_read_group	HAL/gpio.c	/^inline int8u_t gpio_read_group(int8u_t pbase)$/;"	f
gpio_set	HAL/gpio.c	/^inline void gpio_set(int8u_t pbase, int8u_t pmask) {$/;"	f
gpio_test	HAL/gpio.c	/^void gpio_test() {$/;"	f
gpio_toggle	HAL/gpio.c	/^inline void gpio_toggle(int8u_t pbase, int8u_t pmask) {$/;"	f
id	includes/ff.h	/^	WORD	id;				\/* File system mount ID *\/$/;"	m	struct:__anon4
id	includes/ff.h	/^	WORD	id;				\/* Owner file system mount ID *\/$/;"	m	struct:__anon5
id	includes/ff.h	/^	WORD	id;				\/* Owner file system mount ID *\/$/;"	m	struct:__anon6
idx	BSP/ff.c	/^	WORD idx;				\/* File ID 3, directory index *\/$/;"	m	struct:__anon1	file:
ieee15_4_mac_hdr	includes/ieee802_15_4.h	/^typedef struct ieee15_4_mac_hdr {$/;"	s
ieee_mac_hdr	includes/ieee802_15_4.h	/^} ieee_mac_hdr;$/;"	t	typeref:struct:ieee15_4_mac_hdr
inc_lock	BSP/ff.c	/^UINT inc_lock (	\/* Increment file open counter and returns its index (0:int error) *\/$/;"	f	file:
index	includes/adpcm.h	/^    int index;$/;"	m	struct:adpcm_state
index	includes/ff.h	/^	WORD	index;			\/* Current read\/write index number *\/$/;"	m	struct:__anon6
indexTable	Adpcm/adpcm.c	/^static int indexTable[16] =$/;"	v	file:
indexa	includes/translate.h	/^	s16_t  indexa;        \/*an index of buffera, to indicate useful data in buffera*\/$/;"	m	struct:PortBuf
indexb	includes/translate.h	/^	s16_t  indexb;	      \/*an index of bufferb, to indicate useful data in bufferb*\/$/;"	m	struct:PortBuf
indexfile	Application/application.c	/^int32u_t indexfile =0;$/;"	v
initkeys	Stack/translate.c	/^mybool initkeys(void)$/;"	f
initnet	Stack/translate.c	/^mybool initnet(void)$/;"	f
int16s_t	includes/types.h	/^typedef signed short 	int16s_t;$/;"	t
int16u_t	includes/types.h	/^typedef unsigned short	int16u_t;$/;"	t
int32s_t	includes/types.h	/^typedef signed long	int32s_t;$/;"	t
int32u_t	includes/types.h	/^typedef unsigned long	int32u_t;$/;"	t
int8s_t	includes/types.h	/^typedef signed char 	int8s_t;$/;"	t
int8u_t	includes/types.h	/^typedef unsigned char 	int8u_t;$/;"	t
last_clust	includes/ff.h	/^	DWORD	last_clust;		\/* Last allocated cluster *\/$/;"	m	struct:__anon4
lb2bb	BSP/FAT32.c	/^unsigned long lb2bb(unsigned char *dat,unsigned char len) \/\/小端转为大端$/;"	f
lb2bb	BSP/ref/FAT32.c	/^unsigned long lb2bb(unsigned char *dat,unsigned char len) \/\/小端转为大端$/;"	f
led_init	BSP/led.c	/^void led_init() {$/;"	f
led_off	BSP/led.c	/^void led_off(int8u_t led_no) {$/;"	f
led_on	BSP/led.c	/^void led_on(int8u_t led_no) {$/;"	f
lfn	includes/ff.h	/^	WCHAR*	lfn;			\/* Pointer to the LFN working buffer *\/$/;"	m	struct:__anon6
lfn_idx	includes/ff.h	/^	WORD	lfn_idx;		\/* Last matched LFN index number (0xFFFF:No LFN) *\/$/;"	m	struct:__anon6
lfname	includes/ff.h	/^	TCHAR*	lfname;			\/* Pointer to the LFN buffer *\/$/;"	m	struct:__anon7
lfsize	includes/ff.h	/^	UINT 	lfsize;			\/* Size of LFN buffer in TCHAR *\/$/;"	m	struct:__anon7
linkoutput	Stack/netif.c	/^void linkoutput( u8_t* buf, u16_t len )$/;"	f
loadmem	HAL/apbuart.c	/^static inline int loadmem(int addr)$/;"	f	file:
loadmem	HAL/uart.c	/^static inline int loadmem(int addr) {$/;"	f	file:
lock_fs	BSP/ff.c	/^int lock_fs ($/;"	f	file:
lockid	includes/ff.h	/^	UINT	lockid;			\/* File lock ID (index of file semaphore table) *\/$/;"	m	struct:__anon5
mac_output	Stack/netif.c	/^int mac_output( u8_t* buf, u16_t size, u8_t* dst_addr, u8_t ack_bit )$/;"	f
main	lemon.c	/^int main(void) {$/;"	f
max	includes/includes.h	50;"	d
mem_cmp	BSP/ff.c	/^int mem_cmp (const void* dst, const void* src, UINT cnt) {$/;"	f	file:
mem_cpy	BSP/ff.c	/^void mem_cpy (void* dst, const void* src, UINT cnt) {$/;"	f	file:
mem_set	BSP/ff.c	/^void mem_set (void* dst, int val, UINT cnt) {$/;"	f	file:
min	includes/includes.h	55;"	d
mode	includes/translate.h	/^	u8_t   mode;          \/*user can define protocal by using this u8_t*\/$/;"	m	struct:PacketHead
more	includes/translate.h	/^	mybool  more;	      \/*whether this is the last frame of a packet         	    *\/$/;"	m	struct:FrameHead
move_window	BSP/ff.c	/^FRESULT move_window ($/;"	f	file:
music_data	BSP/data.c	/^const short music_data[FILELEN] ={\/*18770,17990,10084,2,16727,17750,28006,8308,16,0,1,1,11025,0,22050,0,2,16,24932,24948,10048,2,0,0,0,1,-2,2,-2,2,-1,0,$/;"	v
musicdatafile	BSP/data.c	/^unsigned char musicdatafile[ FILELEN*2];$/;"	v
mybool	includes/types.h	/^typedef int8u_t 	mybool;$/;"	t
mymemcpy	Application/application.c	/^static void* mymemcpy( void *destin, void *source, unsigned n )$/;"	f	file:
n_fatent	includes/ff.h	/^	DWORD	n_fatent;		\/* Number of FAT entries (= number of clusters + 2) *\/$/;"	m	struct:__anon4
n_fats	includes/ff.h	/^	BYTE	n_fats;			\/* Number of FAT copies (1,2) *\/$/;"	m	struct:__anon4
n_rootdir	includes/ff.h	/^	WORD	n_rootdir;		\/* Number of root directory entries (FAT12\/16) *\/$/;"	m	struct:__anon4
name	BSP/ref/sd.h	/^  unsigned char name[6];$/;"	m	struct:MMC_VOLUME_INFO
name	includes/sd.h	/^  unsigned char name[6];$/;"	m	struct:MMC_VOLUME_INFO
netconfig	Stack/netif.c	/^void netconfig(void)$/;"	f
oem2uni	includes/option/cc936.c	/^const WCHAR oem2uni[] = {$/;"	v	file:
oem2uni	includes/option/cc949.c	/^const WCHAR oem2uni[] = {$/;"	v	file:
oem2uni	includes/option/cc950.c	/^const WCHAR oem2uni[] = {$/;"	v	file:
pad1	includes/ff.h	/^	BYTE	pad1;$/;"	m	struct:__anon5
payload	includes/ieee802_15_4.h	/^	int8u_t payload[0];$/;"	m	struct:ieee15_4_mac_hdr
pd	includes/ff.h	/^	BYTE pd;	\/* Physical drive number *\/$/;"	m	struct:__anon3
pick_lfn	BSP/ff.c	/^int pick_lfn (			\/* 1:Succeeded, 0:Buffer overflow *\/$/;"	f	file:
pix_buf	lemon.c	/^int8u_t pix_buf[OV7670_COL_SIZE*OV7670_ROW_SIZE*2];$/;"	v
pix_idx	BSP/ov7660.c	/^static int16u_t pix_idx;$/;"	v	file:
pl_len	includes/translate.h	/^	s16_t  pl_len;        \/*packet body length     *\/$/;"	m	struct:PacketHead
playwav16m	Application/application.c	/^void playwav16m(void * begin, int32u_t len)$/;"	f
portKeys	Stack/translate.c	/^struct PortKey portKeys[PORTNUM];$/;"	v	typeref:struct:PortKey
pt	includes/ff.h	/^	BYTE pt;	\/* Partition: 0:Auto detect, 1-4:Forced partition) *\/$/;"	m	struct:__anon3
put_fat	BSP/ff.c	/^FRESULT put_fat ($/;"	f
put_rc	BSP/ff.c	/^void put_rc(FRESULT rc) {$/;"	f
readPos	BSP/ref/sd.c	/^unsigned int  readPos=0;$/;"	v
readPos	BSP/sd.c	/^unsigned int readPos = 0;$/;"	v
read_OV7660_reg	BSP/ov7660.c	/^int8u_t read_OV7660_reg(int8u_t reg_addr, int8u_t *reg_ptr) {$/;"	f
read_OV7660_reg	BSP/ref/ov76602/ov7660.c	/^U8 read_OV7660_reg(U8 reg_addr, U8 *reg_ptr)$/;"	f
reada	includes/translate.h	/^	mybool reada;	      \/*which buffer to read  *\/$/;"	m	struct:PortBuf
recePacket	Stack/translate.c	/^s16_t recePacket(void * d_buffer, s16_t maxlen, struct PortKey *   portkey_p)$/;"	f
reg_conf	BSP/ov7660.c	/^const int8u_t reg_conf[][2] =$/;"	v
reg_conf	BSP/ref/ov76602/ov7660.h	/^const U8 reg_conf[][2] =$/;"	v
reg_conf1	BSP/ov7660.c	/^const int8u_t reg_conf1[][2] =$/;"	v
reg_conf2	BSP/ov7660.c	/^const int8u_t reg_conf2[][2] =$/;"	v
reg_conf3	BSP/ov7660.c	/^const int8u_t reg_conf3[][2] =$/;"	v
remove_chain	BSP/ff.c	/^FRESULT remove_chain ($/;"	f	file:
reserved1	includes/ieee802_15_4.h	/^	u16_t reserved1:1;$/;"	m	struct:frm_ctrl
reserved2	includes/ieee802_15_4.h	/^	u16_t reserved2:2;$/;"	m	struct:frm_ctrl
result_t	includes/types.h	/^typedef int8s_t 	result_t;$/;"	t
rf_delay	BSP/rf.c	/^void rf_delay(int32u_t us)$/;"	f
rxbuf	lemon.c	/^int8u_t rxbuf[144] = { 0 };$/;"	v
s16_t	includes/types.h	/^typedef signed short 	s16_t;$/;"	t
s32_t	includes/types.h	/^typedef signed long	s32_t;$/;"	t
s8_t	includes/types.h	/^typedef signed char 	s8_t;$/;"	t
s_mac	includes/translate.h	/^	u16_t  s_mac;         \/*source mac  address    *\/$/;"	m	struct:PacketHead
s_port	includes/translate.h	/^	u8_t   s_port;        \/*source port number     *\/$/;"	m	struct:PacketHead
sclust	includes/ff.h	/^	DWORD	sclust;			\/* File start cluster (0 when fsize==0) *\/$/;"	m	struct:__anon5
sclust	includes/ff.h	/^	DWORD	sclust;			\/* Table start cluster (0:Root dir) *\/$/;"	m	struct:__anon6
sd_init	BSP/ref/sd.c	/^void sd_init()$/;"	f
sd_init	BSP/sd.c	/^void sd_init() {$/;"	f
sd_test	BSP/sd.c	/^void sd_test() {$/;"	f
sect	includes/ff.h	/^	DWORD	sect;			\/* Current sector *\/$/;"	m	struct:__anon6
sectorBuffer	BSP/ref/sd.c	/^BUFFER_TYPE sectorBuffer; \/\/512 bytes for sector buffer$/;"	v
sectorBuffer	BSP/sd.c	/^BUFFER_TYPE sectorBuffer; \/\/512 bytes for sector buffer$/;"	v
sectorPos	BSP/ref/sd.c	/^unsigned char sectorPos=0;$/;"	v
sectorPos	BSP/sd.c	/^unsigned char sectorPos = 0;$/;"	v
sector_count	BSP/ref/sd.h	/^  unsigned int  sector_count;$/;"	m	struct:MMC_VOLUME_INFO
sector_count	includes/sd.h	/^  unsigned int  sector_count;$/;"	m	struct:MMC_VOLUME_INFO
sector_multiply	BSP/ref/sd.h	/^  unsigned char sector_multiply;$/;"	m	struct:MMC_VOLUME_INFO
sector_multiply	includes/sd.h	/^  unsigned char sector_multiply;$/;"	m	struct:MMC_VOLUME_INFO
security_en	includes/ieee802_15_4.h	/^		u16_t security_en:1;$/;"	m	struct:frm_ctrl
sendPacket	Stack/translate.c	/^mybool  sendPacket(void* s_buffer, s16_t maxlen, struct PacketHead*  head_p ,int32u_t delaytime)$/;"	f
sequence	includes/ieee802_15_4.h	/^	int8u_t sequence;$/;"	m	struct:ieee15_4_mac_hdr
signed	Adpcm/adpcm.c	51;"	d	file:
size_MB	BSP/ref/sd.h	/^  unsigned int  size_MB;$/;"	m	struct:MMC_VOLUME_INFO
size_MB	includes/sd.h	/^  unsigned int  size_MB;$/;"	m	struct:MMC_VOLUME_INFO
sjis2uni	includes/option/cc932.c	/^const WCHAR sjis2uni[] = {$/;"	v	file:
sobj	includes/ff.h	/^	_SYNC_t	sobj;			\/* Identifier of sync object *\/$/;"	m	struct:__anon4
spi2_8TxRx	HAL/spi.c	/^int8u_t spi2_8TxRx(int8u_t byte)$/;"	f
spi2_PmodCLS_SendCmd	HAL/spi.c	/^void spi2_PmodCLS_SendCmd(char* cmd)$/;"	f
spi2_PmodCLS_SendString	HAL/spi.c	/^void spi2_PmodCLS_SendString(char* str)$/;"	f
spi2_PmodCLS_init	HAL/spi.c	/^void spi2_PmodCLS_init(void)$/;"	f
spi2_delay	HAL/spi.c	/^void spi2_delay(int16u_t ch)$/;"	f
spi2_delay_time	HAL/spi.c	/^int16u_t spi2_delay_time = SPI2_HIGH;  \/\/adjust speed of spi2,low value,higher speed$/;"	v
spi2_high_speed_mode	HAL/spi.c	/^void spi2_high_speed_mode(void)$/;"	f
spi2_init	HAL/spi.c	/^void spi2_init(void)$/;"	f
spi2_low_speed_mode	HAL/spi.c	/^void spi2_low_speed_mode(void)$/;"	f
spi2_test	HAL/spi.c	/^void spi2_test(void)$/;"	f
spi_init	HAL/spi.c	/^void spi_init(void) $/;"	f
spi_reconfig	HAL/spi.c	/^int8s_t spi_reconfig(int32u_t mask, int32u_t val)$/;"	f
spi_xmit16	HAL/spi.c	/^int16u_t spi_xmit16(int16u_t val)$/;"	f
spi_xmit8	HAL/spi.c	/^int8u_t spi_xmit8(int8u_t val) $/;"	f
src_ADDR	includes/ieee802_15_4.h	/^	int8u_t src_ADDR[2];$/;"	m	struct:ieee15_4_mac_hdr
src_PANID	includes/ieee802_15_4.h	/^	int8u_t src_PANID[2];$/;"	m	struct:ieee15_4_mac_hdr
srcaddr_mode	includes/ieee802_15_4.h	/^	u16_t srcaddr_mode:2;$/;"	m	struct:frm_ctrl
ssize	includes/ff.h	/^	WORD	ssize;			\/* Bytes per sector (512, 1024, 2048 or 4096) *\/$/;"	m	struct:__anon4
stepsizeTable	Adpcm/adpcm.c	/^static int stepsizeTable[89] =$/;"	v	file:
sum_sfn	BSP/ff.c	/^BYTE sum_sfn ($/;"	f	file:
sync	BSP/ff.c	/^FRESULT sync (	\/* FR_OK: successful, FR_DISK_ERR: failed *\/$/;"	f	file:
system_init	lemon.c	/^void system_init(void) {$/;"	f
test	HAL/apbuart.c	/^static char test[] = "abcdefghijklmnopqrstuvwxyz";$/;"	v	file:
test	HAL/uart.c	/^static char test[] =$/;"	v	file:
testing	HAL/tools.c	/^void testing() {$/;"	f
testsize	HAL/uart.c	/^static int testsize = sizeof test \/ sizeof test[0];$/;"	v	file:
thread_collect	lemon.c	/^void thread_collect(cyg_addrword_t data) {$/;"	f
thread_ctrl	lemon.c	/^void thread_ctrl(cyg_addrword_t data) {$/;"	f
thread_s	lemon.c	/^static cyg_thread thread_s[NTHREADS];$/;"	v	file:
thread_stacks	lemon.c	/^static char thread_stacks[NTHREADS][STACKSIZE];$/;"	v	file:
threads_isr	lemon.c	/^static cyg_handle_t threads_voice, threads_isr;$/;"	v	file:
threads_voice	lemon.c	/^static cyg_handle_t threads_voice, threads_isr;$/;"	v	file:
trans_delay	Stack/translate.c	/^void trans_delay(int32u_t us)$/;"	f
txbuf	lemon.c	/^int8u_t txbuf[128] = { 0 };$/;"	v
u16_t	includes/types.h	/^typedef unsigned short	u16_t;$/;"	t
u32_t	includes/types.h	/^typedef unsigned long	u32_t;$/;"	t
u8_t	includes/types.h	/^typedef unsigned char 	u8_t;$/;"	t
uart0_init	HAL/uart.c	/^void uart0_init(int addr) {$/;"	f
uart_fail	HAL/uart.c	/^void inline uart_fail(int fail_code) {$/;"	f
uni2oem	includes/option/cc936.c	/^const WCHAR uni2oem[] = {$/;"	v	file:
uni2oem	includes/option/cc949.c	/^const WCHAR uni2oem[] = {$/;"	v	file:
uni2oem	includes/option/cc950.c	/^const WCHAR uni2oem[] = {$/;"	v	file:
uni2sjis	includes/option/cc932.c	/^const WCHAR uni2sjis[] = {$/;"	v	file:
unlock_fs	BSP/ff.c	/^void unlock_fs ($/;"	f	file:
used	includes/translate.h	/^	mybool           used;$/;"	m	struct:PortKey
uz2400d_lr	BSP/uz2400d.c	/^int8u_t uz2400d_lr(int16u_t laddr)$/;"	f
uz2400d_lr_block	BSP/uz2400d.c	/^void uz2400d_lr_block(int16u_t laddr, int8u_t* buf, int16u_t size)$/;"	f
uz2400d_lw	BSP/uz2400d.c	/^void uz2400d_lw(int16u_t laddr, int8u_t value)$/;"	f
uz2400d_lw_block	BSP/uz2400d.c	/^void uz2400d_lw_block(int16u_t laddr, int8u_t* buf, int16u_t size)$/;"	f
uz2400d_sr	BSP/uz2400d.c	/^int8u_t uz2400d_sr(int8u_t saddr)$/;"	f
uz2400d_sw	BSP/uz2400d.c	/^void uz2400d_sw(int8u_t saddr, int8u_t value)$/;"	f
validate	BSP/ff.c	/^FRESULT validate (	\/* FR_OK(0): The object is valid, !=0: Invalid *\/$/;"	f	file:
valprev	includes/adpcm.h	/^    int valprev;$/;"	m	struct:adpcm_state
wait_ready	BSP/sd.c	/^static BYTE wait_ready(void) {$/;"	f	file:
wflag	includes/ff.h	/^	BYTE	wflag;			\/* win[] dirty flag (1:must be written back) *\/$/;"	m	struct:__anon4
win	includes/ff.h	/^	BYTE	win[_MAX_SS];	\/* Disk access window for Directory, FAT (and Data on tiny cfg) *\/$/;"	m	struct:__anon4
winsect	includes/ff.h	/^	DWORD	winsect;		\/* Current sector appearing in the win[] *\/$/;"	m	struct:__anon4
write_OV7660_reg	BSP/ov7660.c	/^int8u_t write_OV7660_reg(int8u_t reg_addr, int8u_t reg_data) {$/;"	f
write_OV7660_reg	BSP/ref/ov76602/ov7660.c	/^U8 write_OV7660_reg(U8 reg_addr, U8 reg_data)$/;"	f
writea	includes/translate.h	/^	mybool writea;	      \/*which buffer to write *\/               $/;"	m	struct:PortBuf
xmit_datablock	BSP/sd.c	/^char xmit_datablock(const BYTE *buff, \/* 512 byte data block to be transmitted *\/$/;"	f	file:

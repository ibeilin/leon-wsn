#include "uart.h"

#define DISABLE 0x0
#define ENABLE_RX 0x1
#define ENABLE_TX 0x2
#define RX_INT 0x4
#define TX_INT 0x8
#define EVEN_PARITY 0x20
#define ODD_PARITY 0x30
#define LOOP_BACK 0x80
#define FLOW_CONTROL 0x40
#define FIFO_TX_INT 0x200
#define FIFO_RX_INT 0x400

/* 
 * uart[0] = data
 * uart[1] = status
 * uart[2] = control
 * uart[3] = scaler
 */

static inline int loadmem(int addr) {
	int tmp;
	asm volatile (" lda [%1]1, %0 "
			: "=r"(tmp)
			: "r"(addr)
	);
	return tmp;
}

struct uart_regs {
	volatile int data;
	volatile int status;
	volatile int control;
	volatile int scaler;
};

static char test[] =
		"40ti94a+0ygiyu05yhap5yi4h+a+iiyxhi4k59j0q905jkoyphoptjrhia4iy0+4";
static int testsize = sizeof test / sizeof test[0];

void inline fail(int fail_code) {
	printf("error:uart err_code=%d\n", fail_code);
	return;
}

int apbuart_test(int addr) {
	struct uart_regs *uart = (struct uart_regs *) addr;
	int temp;
	int i;

	//-----------------------------------------------------------------
	printf("apbuart_test init begin\n");
	//-----------------------------------------------------------------
	/* set scaler to low value to speed up simulations */
	// scaler = (((system_clk*10)/(baudrate*8))-5)/10
		// 		  = ( (50M*10)/9600*8-5 )/10 = 650.54
	uart->scaler = 651;
	//uart->status = 0;
	uart->data = 0;
	uart->control = ENABLE_TX | ENABLE_RX;

	printf("apbuart_test TRANSMITTER TEST begin\n");
	for (i = 0; i < testsize; i++) {
		/*transmit shift regs not empty,wait*/
		printf("char:%c,status:%4x\n",test[i],loadmem((int) &uart->status));
		while ((loadmem((int) &uart->status) & 2) == 0){
			uart->control |= 0x80 ;//enable transmit interrupt
		}
		/*send data*/
		uart->data = test[i];
	}
	//-----------------------------------------------------------------
	printf("apbuart_test TRANSMITTER TEST end\n");
	//-----------------------------------------------------------------
	uart->control = DISABLE;
	return 0;
}
